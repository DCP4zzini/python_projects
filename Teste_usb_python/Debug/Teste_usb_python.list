
Teste_usb_python.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000434c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  080044ec  080044ec  000144ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800467c  0800467c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800467c  0800467c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800467c  0800467c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800467c  0800467c  0001467c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004680  08004680  00014680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000c8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000138  20000138  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b929  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000196c  00000000  00000000  0002b9c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000728  00000000  00000000  0002d338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000690  00000000  00000000  0002da60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020a36  00000000  00000000  0002e0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a0ae  00000000  00000000  0004eb26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1a8b  00000000  00000000  00058bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011a65f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002708  00000000  00000000  0011a6b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080044d4 	.word	0x080044d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080044d4 	.word	0x080044d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b0b2      	sub	sp, #200	; 0xc8
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	unsigned char rxDataBuffer[50] = " ";
 8000296:	2320      	movs	r3, #32
 8000298:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800029c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80002a0:	222e      	movs	r2, #46	; 0x2e
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 ff39 	bl	800311c <memset>
	unsigned char txDataBuffer[100] = " ";
 80002aa:	2320      	movs	r3, #32
 80002ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002b2:	2260      	movs	r2, #96	; 0x60
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 ff30 	bl	800311c <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002bc:	f000 fb12 	bl	80008e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c0:	f000 f862 	bl	8000388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c4:	f000 f8ee 	bl	80004a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002c8:	f000 f8bc 	bl	8000444 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  unsigned int random_value = 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  memset(circularBuffer,0,sizeof(circularBuffer));
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2228      	movs	r2, #40	; 0x28
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f002 ff1f 	bl	800311c <memset>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  	HAL_UART_Receive(&huart2, rxDataBuffer, sizeof(rxDataBuffer), 100);
 80002de:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80002e2:	2364      	movs	r3, #100	; 0x64
 80002e4:	2232      	movs	r2, #50	; 0x32
 80002e6:	4824      	ldr	r0, [pc, #144]	; (8000378 <main+0xe8>)
 80002e8:	f002 fa2c 	bl	8002744 <HAL_UART_Receive>
  	if (memcmp(rxDataBuffer,"wake up",sizeof("wake up")) == 0){
 80002ec:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80002f0:	2208      	movs	r2, #8
 80002f2:	4922      	ldr	r1, [pc, #136]	; (800037c <main+0xec>)
 80002f4:	4618      	mov	r0, r3
 80002f6:	f002 ff03 	bl	8003100 <memcmp>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d133      	bne.n	8000368 <main+0xd8>
  		memset(rxDataBuffer, 0, sizeof(rxDataBuffer));
 8000300:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000304:	2232      	movs	r2, #50	; 0x32
 8000306:	2100      	movs	r1, #0
 8000308:	4618      	mov	r0, r3
 800030a:	f002 ff07 	bl	800311c <memset>
  		random_value = (int)random() % 0xffff;
 800030e:	f002 ff0d 	bl	800312c <random>
 8000312:	4602      	mov	r2, r0
 8000314:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <main+0xf0>)
 8000316:	fb83 1302 	smull	r1, r3, r3, r2
 800031a:	4413      	add	r3, r2
 800031c:	13d9      	asrs	r1, r3, #15
 800031e:	17d3      	asrs	r3, r2, #31
 8000320:	1ac9      	subs	r1, r1, r3
 8000322:	460b      	mov	r3, r1
 8000324:	041b      	lsls	r3, r3, #16
 8000326:	1a5b      	subs	r3, r3, r1
 8000328:	1ad1      	subs	r1, r2, r3
 800032a:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
  		insertNewValueToBuffer((void *)circularBuffer, random_value);
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8000334:	4618      	mov	r0, r3
 8000336:	f000 f91b 	bl	8000570 <insertNewValueToBuffer>
  		sprintf((void *)txDataBuffer, "%d",random_value);
 800033a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800033e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000342:	4910      	ldr	r1, [pc, #64]	; (8000384 <main+0xf4>)
 8000344:	4618      	mov	r0, r3
 8000346:	f002 ff31 	bl	80031ac <siprintf>
  		HAL_UART_Transmit(&huart2, txDataBuffer, strlen((void *)txDataBuffer), 1000);
 800034a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800034e:	4618      	mov	r0, r3
 8000350:	f7ff ff46 	bl	80001e0 <strlen>
 8000354:	4603      	mov	r3, r0
 8000356:	b29a      	uxth	r2, r3
 8000358:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800035c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000360:	4805      	ldr	r0, [pc, #20]	; (8000378 <main+0xe8>)
 8000362:	f002 f965 	bl	8002630 <HAL_UART_Transmit>
 8000366:	e7ba      	b.n	80002de <main+0x4e>
  	}else{
  		memset(rxDataBuffer,0,sizeof(rxDataBuffer));
 8000368:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800036c:	2232      	movs	r2, #50	; 0x32
 800036e:	2100      	movs	r1, #0
 8000370:	4618      	mov	r0, r3
 8000372:	f002 fed3 	bl	800311c <memset>
  	HAL_UART_Receive(&huart2, rxDataBuffer, sizeof(rxDataBuffer), 100);
 8000376:	e7b2      	b.n	80002de <main+0x4e>
 8000378:	2000009c 	.word	0x2000009c
 800037c:	080044ec 	.word	0x080044ec
 8000380:	80008001 	.word	0x80008001
 8000384:	080044f4 	.word	0x080044f4

08000388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b0a6      	sub	sp, #152	; 0x98
 800038c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000392:	2228      	movs	r2, #40	; 0x28
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f002 fec0 	bl	800311c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800039c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
 80003aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2258      	movs	r2, #88	; 0x58
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f002 feb2 	bl	800311c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b8:	2302      	movs	r3, #2
 80003ba:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003bc:	2301      	movs	r3, #1
 80003be:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c0:	2310      	movs	r3, #16
 80003c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c6:	2302      	movs	r3, #2
 80003c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 fd6a 	bl	8000ec0 <HAL_RCC_OscConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003f2:	f000 f8df 	bl	80005b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f6:	230f      	movs	r3, #15
 80003f8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fa:	2302      	movs	r3, #2
 80003fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000406:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000408:	2300      	movs	r3, #0
 800040a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800040c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000410:	2102      	movs	r1, #2
 8000412:	4618      	mov	r0, r3
 8000414:	f001 fc6a 	bl	8001cec <HAL_RCC_ClockConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800041e:	f000 f8c9 	bl	80005b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000422:	2302      	movs	r3, #2
 8000424:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000426:	2300      	movs	r3, #0
 8000428:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	4618      	mov	r0, r3
 800042e:	f001 fe93 	bl	8002158 <HAL_RCCEx_PeriphCLKConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000438:	f000 f8bc 	bl	80005b4 <Error_Handler>
  }
}
 800043c:	bf00      	nop
 800043e:	3798      	adds	r7, #152	; 0x98
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000448:	4b14      	ldr	r3, [pc, #80]	; (800049c <MX_USART2_UART_Init+0x58>)
 800044a:	4a15      	ldr	r2, [pc, #84]	; (80004a0 <MX_USART2_UART_Init+0x5c>)
 800044c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000450:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <MX_USART2_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <MX_USART2_UART_Init+0x58>)
 800046a:	220c      	movs	r2, #12
 800046c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046e:	4b0b      	ldr	r3, [pc, #44]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000474:	4b09      	ldr	r3, [pc, #36]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800047a:	4b08      	ldr	r3, [pc, #32]	; (800049c <MX_USART2_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000482:	2200      	movs	r2, #0
 8000484:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000486:	4805      	ldr	r0, [pc, #20]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000488:	f002 f884 	bl	8002594 <HAL_UART_Init>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000492:	f000 f88f 	bl	80005b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	2000009c 	.word	0x2000009c
 80004a0:	40004400 	.word	0x40004400

080004a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08a      	sub	sp, #40	; 0x28
 80004a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	f107 0314 	add.w	r3, r7, #20
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
 80004b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ba:	4b2b      	ldr	r3, [pc, #172]	; (8000568 <MX_GPIO_Init+0xc4>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a2a      	ldr	r2, [pc, #168]	; (8000568 <MX_GPIO_Init+0xc4>)
 80004c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004c4:	6153      	str	r3, [r2, #20]
 80004c6:	4b28      	ldr	r3, [pc, #160]	; (8000568 <MX_GPIO_Init+0xc4>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004ce:	613b      	str	r3, [r7, #16]
 80004d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004d2:	4b25      	ldr	r3, [pc, #148]	; (8000568 <MX_GPIO_Init+0xc4>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a24      	ldr	r2, [pc, #144]	; (8000568 <MX_GPIO_Init+0xc4>)
 80004d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b22      	ldr	r3, [pc, #136]	; (8000568 <MX_GPIO_Init+0xc4>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b1f      	ldr	r3, [pc, #124]	; (8000568 <MX_GPIO_Init+0xc4>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a1e      	ldr	r2, [pc, #120]	; (8000568 <MX_GPIO_Init+0xc4>)
 80004f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <MX_GPIO_Init+0xc4>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000502:	4b19      	ldr	r3, [pc, #100]	; (8000568 <MX_GPIO_Init+0xc4>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a18      	ldr	r2, [pc, #96]	; (8000568 <MX_GPIO_Init+0xc4>)
 8000508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800050c:	6153      	str	r3, [r2, #20]
 800050e:	4b16      	ldr	r3, [pc, #88]	; (8000568 <MX_GPIO_Init+0xc4>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2120      	movs	r1, #32
 800051e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000522:	f000 fcb5 	bl	8000e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000526:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800052a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800052c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	4619      	mov	r1, r3
 800053c:	480b      	ldr	r0, [pc, #44]	; (800056c <MX_GPIO_Init+0xc8>)
 800053e:	f000 fb1d 	bl	8000b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000542:	2320      	movs	r3, #32
 8000544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000546:	2301      	movs	r3, #1
 8000548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	2300      	movs	r3, #0
 8000550:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4619      	mov	r1, r3
 8000558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055c:	f000 fb0e 	bl	8000b7c <HAL_GPIO_Init>

}
 8000560:	bf00      	nop
 8000562:	3728      	adds	r7, #40	; 0x28
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40021000 	.word	0x40021000
 800056c:	48000800 	.word	0x48000800

08000570 <insertNewValueToBuffer>:

/* USER CODE BEGIN 4 */
void insertNewValueToBuffer(uint32_t * circular_buffer, uint32_t new_input_value){
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	// MAX SIZE = 10
	static char buffer_size = 0;

	if(buffer_size == BUFFER_MAX_SIZE){
 800057a:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <insertNewValueToBuffer+0x40>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b0a      	cmp	r3, #10
 8000580:	d102      	bne.n	8000588 <insertNewValueToBuffer+0x18>
		buffer_size = 0;
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <insertNewValueToBuffer+0x40>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
	}
	*(circular_buffer + buffer_size) = new_input_value;
 8000588:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <insertNewValueToBuffer+0x40>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	683a      	ldr	r2, [r7, #0]
 8000594:	601a      	str	r2, [r3, #0]
	buffer_size ++;
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <insertNewValueToBuffer+0x40>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	3301      	adds	r3, #1
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <insertNewValueToBuffer+0x40>)
 80005a0:	701a      	strb	r2, [r3, #0]

}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	2000008c 	.word	0x2000008c

080005b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b8:	b672      	cpsid	i
}
 80005ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005bc:	e7fe      	b.n	80005bc <Error_Handler+0x8>
	...

080005c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <HAL_MspInit+0x44>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <HAL_MspInit+0x44>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6193      	str	r3, [r2, #24]
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <HAL_MspInit+0x44>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <HAL_MspInit+0x44>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	4a08      	ldr	r2, [pc, #32]	; (8000604 <HAL_MspInit+0x44>)
 80005e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e8:	61d3      	str	r3, [r2, #28]
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_MspInit+0x44>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005f6:	2007      	movs	r0, #7
 80005f8:	f000 fa8c 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40021000 	.word	0x40021000

08000608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a17      	ldr	r2, [pc, #92]	; (8000684 <HAL_UART_MspInit+0x7c>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d128      	bne.n	800067c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <HAL_UART_MspInit+0x80>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a16      	ldr	r2, [pc, #88]	; (8000688 <HAL_UART_MspInit+0x80>)
 8000630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000634:	61d3      	str	r3, [r2, #28]
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <HAL_UART_MspInit+0x80>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <HAL_UART_MspInit+0x80>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a10      	ldr	r2, [pc, #64]	; (8000688 <HAL_UART_MspInit+0x80>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	6153      	str	r3, [r2, #20]
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <HAL_UART_MspInit+0x80>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800065a:	230c      	movs	r3, #12
 800065c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065e:	2302      	movs	r3, #2
 8000660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800066a:	2307      	movs	r3, #7
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000678:	f000 fa80 	bl	8000b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	; 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40004400 	.word	0x40004400
 8000688:	40021000 	.word	0x40021000

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <NMI_Handler+0x4>

08000692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <HardFault_Handler+0x4>

08000698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <MemManage_Handler+0x4>

0800069e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <BusFault_Handler+0x4>

080006a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <UsageFault_Handler+0x4>

080006aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d8:	f000 f94a 	bl	8000970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}

080006e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
	return 1;
 80006e4:	2301      	movs	r3, #1
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <_kill>:

int _kill(int pid, int sig)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80006fa:	f002 fcd7 	bl	80030ac <__errno>
 80006fe:	4603      	mov	r3, r0
 8000700:	2216      	movs	r2, #22
 8000702:	601a      	str	r2, [r3, #0]
	return -1;
 8000704:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <_exit>:

void _exit (int status)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000718:	f04f 31ff 	mov.w	r1, #4294967295
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ffe7 	bl	80006f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000722:	e7fe      	b.n	8000722 <_exit+0x12>

08000724 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	e00a      	b.n	800074c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000736:	f3af 8000 	nop.w
 800073a:	4601      	mov	r1, r0
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	1c5a      	adds	r2, r3, #1
 8000740:	60ba      	str	r2, [r7, #8]
 8000742:	b2ca      	uxtb	r2, r1
 8000744:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	3301      	adds	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697a      	ldr	r2, [r7, #20]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	429a      	cmp	r2, r3
 8000752:	dbf0      	blt.n	8000736 <_read+0x12>
	}

return len;
 8000754:	687b      	ldr	r3, [r7, #4]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b086      	sub	sp, #24
 8000762:	af00      	add	r7, sp, #0
 8000764:	60f8      	str	r0, [r7, #12]
 8000766:	60b9      	str	r1, [r7, #8]
 8000768:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	e009      	b.n	8000784 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	60ba      	str	r2, [r7, #8]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	4618      	mov	r0, r3
 800077a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	3301      	adds	r3, #1
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697a      	ldr	r2, [r7, #20]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	429a      	cmp	r2, r3
 800078a:	dbf1      	blt.n	8000770 <_write+0x12>
	}
	return len;
 800078c:	687b      	ldr	r3, [r7, #4]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <_close>:

int _close(int file)
{
 8000796:	b480      	push	{r7}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
	return -1;
 800079e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007ae:	b480      	push	{r7}
 80007b0:	b083      	sub	sp, #12
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
 80007b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007be:	605a      	str	r2, [r3, #4]
	return 0;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <_isatty>:

int _isatty(int file)
{
 80007ce:	b480      	push	{r7}
 80007d0:	b083      	sub	sp, #12
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
	return 1;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	4618      	mov	r0, r3
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
	return 0;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
	...

08000800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000808:	4a14      	ldr	r2, [pc, #80]	; (800085c <_sbrk+0x5c>)
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <_sbrk+0x60>)
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <_sbrk+0x64>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d102      	bne.n	8000822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <_sbrk+0x64>)
 800081e:	4a12      	ldr	r2, [pc, #72]	; (8000868 <_sbrk+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <_sbrk+0x64>)
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4413      	add	r3, r2
 800082a:	693a      	ldr	r2, [r7, #16]
 800082c:	429a      	cmp	r2, r3
 800082e:	d207      	bcs.n	8000840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000830:	f002 fc3c 	bl	80030ac <__errno>
 8000834:	4603      	mov	r3, r0
 8000836:	220c      	movs	r2, #12
 8000838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800083a:	f04f 33ff 	mov.w	r3, #4294967295
 800083e:	e009      	b.n	8000854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <_sbrk+0x64>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <_sbrk+0x64>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4413      	add	r3, r2
 800084e:	4a05      	ldr	r2, [pc, #20]	; (8000864 <_sbrk+0x64>)
 8000850:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000852:	68fb      	ldr	r3, [r7, #12]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20010000 	.word	0x20010000
 8000860:	00000400 	.word	0x00000400
 8000864:	20000090 	.word	0x20000090
 8000868:	20000138 	.word	0x20000138

0800086c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <SystemInit+0x20>)
 8000872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000876:	4a05      	ldr	r2, [pc, #20]	; (800088c <SystemInit+0x20>)
 8000878:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800087c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008c8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000894:	f7ff ffea 	bl	800086c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <LoopForever+0x6>)
  ldr r1, =_edata
 800089a:	490d      	ldr	r1, [pc, #52]	; (80008d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <LoopForever+0xe>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a0:	e002      	b.n	80008a8 <LoopCopyDataInit>

080008a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a6:	3304      	adds	r3, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ac:	d3f9      	bcc.n	80008a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b0:	4c0a      	ldr	r4, [pc, #40]	; (80008dc <LoopForever+0x16>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b4:	e001      	b.n	80008ba <LoopFillZerobss>

080008b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b8:	3204      	adds	r2, #4

080008ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008bc:	d3fb      	bcc.n	80008b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008be:	f002 fbfb 	bl	80030b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008c2:	f7ff fce5 	bl	8000290 <main>

080008c6 <LoopForever>:

LoopForever:
    b LoopForever
 80008c6:	e7fe      	b.n	80008c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008d4:	08004684 	.word	0x08004684
  ldr r2, =_sbss
 80008d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008dc:	20000138 	.word	0x20000138

080008e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008e0:	e7fe      	b.n	80008e0 <ADC1_2_IRQHandler>
	...

080008e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <HAL_Init+0x28>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a07      	ldr	r2, [pc, #28]	; (800090c <HAL_Init+0x28>)
 80008ee:	f043 0310 	orr.w	r3, r3, #16
 80008f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f4:	2003      	movs	r0, #3
 80008f6:	f000 f90d 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fa:	2000      	movs	r0, #0
 80008fc:	f000 f808 	bl	8000910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000900:	f7ff fe5e 	bl	80005c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40022000 	.word	0x40022000

08000910 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_InitTick+0x54>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_InitTick+0x58>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000926:	fbb3 f3f1 	udiv	r3, r3, r1
 800092a:	fbb2 f3f3 	udiv	r3, r2, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f000 f917 	bl	8000b62 <HAL_SYSTICK_Config>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	e00e      	b.n	800095c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b0f      	cmp	r3, #15
 8000942:	d80a      	bhi.n	800095a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000944:	2200      	movs	r2, #0
 8000946:	6879      	ldr	r1, [r7, #4]
 8000948:	f04f 30ff 	mov.w	r0, #4294967295
 800094c:	f000 f8ed 	bl	8000b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000950:	4a06      	ldr	r2, [pc, #24]	; (800096c <HAL_InitTick+0x5c>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	e000      	b.n	800095c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
}
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000000 	.word	0x20000000
 8000968:	20000008 	.word	0x20000008
 800096c:	20000004 	.word	0x20000004

08000970 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_IncTick+0x20>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_IncTick+0x24>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4413      	add	r3, r2
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <HAL_IncTick+0x24>)
 8000982:	6013      	str	r3, [r2, #0]
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000008 	.word	0x20000008
 8000994:	20000124 	.word	0x20000124

08000998 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return uwTick;  
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <HAL_GetTick+0x14>)
 800099e:	681b      	ldr	r3, [r3, #0]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000124 	.word	0x20000124

080009b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e2:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	60d3      	str	r3, [r2, #12]
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <__NVIC_GetPriorityGrouping+0x18>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	f003 0307 	and.w	r3, r3, #7
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	db0a      	blt.n	8000a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	490c      	ldr	r1, [pc, #48]	; (8000a60 <__NVIC_SetPriority+0x4c>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	b2d2      	uxtb	r2, r2
 8000a36:	440b      	add	r3, r1
 8000a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a3c:	e00a      	b.n	8000a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4908      	ldr	r1, [pc, #32]	; (8000a64 <__NVIC_SetPriority+0x50>)
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	3b04      	subs	r3, #4
 8000a4c:	0112      	lsls	r2, r2, #4
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	440b      	add	r3, r1
 8000a52:	761a      	strb	r2, [r3, #24]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000e100 	.word	0xe000e100
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b089      	sub	sp, #36	; 0x24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f1c3 0307 	rsb	r3, r3, #7
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	bf28      	it	cs
 8000a86:	2304      	movcs	r3, #4
 8000a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d902      	bls.n	8000a98 <NVIC_EncodePriority+0x30>
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3b03      	subs	r3, #3
 8000a96:	e000      	b.n	8000a9a <NVIC_EncodePriority+0x32>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	401a      	ands	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	43d9      	mvns	r1, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	4313      	orrs	r3, r2
         );
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3724      	adds	r7, #36	; 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
	...

08000ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae0:	d301      	bcc.n	8000ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00f      	b.n	8000b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <SysTick_Config+0x40>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aee:	210f      	movs	r1, #15
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f7ff ff8e 	bl	8000a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <SysTick_Config+0x40>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <SysTick_Config+0x40>)
 8000b00:	2207      	movs	r2, #7
 8000b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	e000e010 	.word	0xe000e010

08000b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff47 	bl	80009b0 <__NVIC_SetPriorityGrouping>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b3c:	f7ff ff5c 	bl	80009f8 <__NVIC_GetPriorityGrouping>
 8000b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	6978      	ldr	r0, [r7, #20]
 8000b48:	f7ff ff8e 	bl	8000a68 <NVIC_EncodePriority>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff5d 	bl	8000a14 <__NVIC_SetPriority>
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ffb0 	bl	8000ad0 <SysTick_Config>
 8000b70:	4603      	mov	r3, r0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b8a:	e160      	b.n	8000e4e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	2101      	movs	r1, #1
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	fa01 f303 	lsl.w	r3, r1, r3
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f000 8152 	beq.w	8000e48 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 0303 	and.w	r3, r3, #3
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d005      	beq.n	8000bbc <HAL_GPIO_Init+0x40>
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 0303 	and.w	r3, r3, #3
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d130      	bne.n	8000c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	68da      	ldr	r2, [r3, #12]
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	091b      	lsrs	r3, r3, #4
 8000c08:	f003 0201 	and.w	r2, r3, #1
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 0303 	and.w	r3, r3, #3
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	d017      	beq.n	8000c5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	2203      	movs	r2, #3
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	689a      	ldr	r2, [r3, #8]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d123      	bne.n	8000cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	08da      	lsrs	r2, r3, #3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3208      	adds	r2, #8
 8000c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	220f      	movs	r2, #15
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	691a      	ldr	r2, [r3, #16]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	f003 0307 	and.w	r3, r3, #7
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	08da      	lsrs	r2, r3, #3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3208      	adds	r2, #8
 8000ca8:	6939      	ldr	r1, [r7, #16]
 8000caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	2203      	movs	r2, #3
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 0203 	and.w	r2, r3, #3
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 80ac 	beq.w	8000e48 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf0:	4b5e      	ldr	r3, [pc, #376]	; (8000e6c <HAL_GPIO_Init+0x2f0>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a5d      	ldr	r2, [pc, #372]	; (8000e6c <HAL_GPIO_Init+0x2f0>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b5b      	ldr	r3, [pc, #364]	; (8000e6c <HAL_GPIO_Init+0x2f0>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d08:	4a59      	ldr	r2, [pc, #356]	; (8000e70 <HAL_GPIO_Init+0x2f4>)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	089b      	lsrs	r3, r3, #2
 8000d0e:	3302      	adds	r3, #2
 8000d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	220f      	movs	r2, #15
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d32:	d025      	beq.n	8000d80 <HAL_GPIO_Init+0x204>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a4f      	ldr	r2, [pc, #316]	; (8000e74 <HAL_GPIO_Init+0x2f8>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d01f      	beq.n	8000d7c <HAL_GPIO_Init+0x200>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a4e      	ldr	r2, [pc, #312]	; (8000e78 <HAL_GPIO_Init+0x2fc>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d019      	beq.n	8000d78 <HAL_GPIO_Init+0x1fc>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a4d      	ldr	r2, [pc, #308]	; (8000e7c <HAL_GPIO_Init+0x300>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d013      	beq.n	8000d74 <HAL_GPIO_Init+0x1f8>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a4c      	ldr	r2, [pc, #304]	; (8000e80 <HAL_GPIO_Init+0x304>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d00d      	beq.n	8000d70 <HAL_GPIO_Init+0x1f4>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a4b      	ldr	r2, [pc, #300]	; (8000e84 <HAL_GPIO_Init+0x308>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d007      	beq.n	8000d6c <HAL_GPIO_Init+0x1f0>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a4a      	ldr	r2, [pc, #296]	; (8000e88 <HAL_GPIO_Init+0x30c>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d101      	bne.n	8000d68 <HAL_GPIO_Init+0x1ec>
 8000d64:	2306      	movs	r3, #6
 8000d66:	e00c      	b.n	8000d82 <HAL_GPIO_Init+0x206>
 8000d68:	2307      	movs	r3, #7
 8000d6a:	e00a      	b.n	8000d82 <HAL_GPIO_Init+0x206>
 8000d6c:	2305      	movs	r3, #5
 8000d6e:	e008      	b.n	8000d82 <HAL_GPIO_Init+0x206>
 8000d70:	2304      	movs	r3, #4
 8000d72:	e006      	b.n	8000d82 <HAL_GPIO_Init+0x206>
 8000d74:	2303      	movs	r3, #3
 8000d76:	e004      	b.n	8000d82 <HAL_GPIO_Init+0x206>
 8000d78:	2302      	movs	r3, #2
 8000d7a:	e002      	b.n	8000d82 <HAL_GPIO_Init+0x206>
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e000      	b.n	8000d82 <HAL_GPIO_Init+0x206>
 8000d80:	2300      	movs	r3, #0
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	f002 0203 	and.w	r2, r2, #3
 8000d88:	0092      	lsls	r2, r2, #2
 8000d8a:	4093      	lsls	r3, r2
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d92:	4937      	ldr	r1, [pc, #220]	; (8000e70 <HAL_GPIO_Init+0x2f4>)
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	089b      	lsrs	r3, r3, #2
 8000d98:	3302      	adds	r3, #2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000da0:	4b3a      	ldr	r3, [pc, #232]	; (8000e8c <HAL_GPIO_Init+0x310>)
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dc4:	4a31      	ldr	r2, [pc, #196]	; (8000e8c <HAL_GPIO_Init+0x310>)
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dca:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <HAL_GPIO_Init+0x310>)
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dee:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <HAL_GPIO_Init+0x310>)
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000df4:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <HAL_GPIO_Init+0x310>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e18:	4a1c      	ldr	r2, [pc, #112]	; (8000e8c <HAL_GPIO_Init+0x310>)
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <HAL_GPIO_Init+0x310>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <HAL_GPIO_Init+0x310>)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	fa22 f303 	lsr.w	r3, r2, r3
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f47f ae97 	bne.w	8000b8c <HAL_GPIO_Init+0x10>
  }
}
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
 8000e62:	371c      	adds	r7, #28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010000 	.word	0x40010000
 8000e74:	48000400 	.word	0x48000400
 8000e78:	48000800 	.word	0x48000800
 8000e7c:	48000c00 	.word	0x48000c00
 8000e80:	48001000 	.word	0x48001000
 8000e84:	48001400 	.word	0x48001400
 8000e88:	48001800 	.word	0x48001800
 8000e8c:	40010400 	.word	0x40010400

08000e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ea0:	787b      	ldrb	r3, [r7, #1]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000eac:	e002      	b.n	8000eb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eae:	887a      	ldrh	r2, [r7, #2]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	f000 bf01 	b.w	8001cdc <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f000 8160 	beq.w	80011aa <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000eea:	4bae      	ldr	r3, [pc, #696]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f003 030c 	and.w	r3, r3, #12
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	d00c      	beq.n	8000f10 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ef6:	4bab      	ldr	r3, [pc, #684]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b08      	cmp	r3, #8
 8000f00:	d159      	bne.n	8000fb6 <HAL_RCC_OscConfig+0xf6>
 8000f02:	4ba8      	ldr	r3, [pc, #672]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f0e:	d152      	bne.n	8000fb6 <HAL_RCC_OscConfig+0xf6>
 8000f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f14:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f18:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000f1c:	fa93 f3a3 	rbit	r3, r3
 8000f20:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f24:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f28:	fab3 f383 	clz	r3, r3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	095b      	lsrs	r3, r3, #5
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d102      	bne.n	8000f42 <HAL_RCC_OscConfig+0x82>
 8000f3c:	4b99      	ldr	r3, [pc, #612]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	e015      	b.n	8000f6e <HAL_RCC_OscConfig+0xae>
 8000f42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f46:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000f4e:	fa93 f3a3 	rbit	r3, r3
 8000f52:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000f56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f5a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f5e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000f62:	fa93 f3a3 	rbit	r3, r3
 8000f66:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f6a:	4b8e      	ldr	r3, [pc, #568]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f72:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000f76:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000f7a:	fa92 f2a2 	rbit	r2, r2
 8000f7e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000f82:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f86:	fab2 f282 	clz	r2, r2
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	f042 0220 	orr.w	r2, r2, #32
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	f002 021f 	and.w	r2, r2, #31
 8000f96:	2101      	movs	r1, #1
 8000f98:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 8102 	beq.w	80011a8 <HAL_RCC_OscConfig+0x2e8>
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f040 80fc 	bne.w	80011a8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	f000 be93 	b.w	8001cdc <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc0:	d106      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x110>
 8000fc2:	4b78      	ldr	r3, [pc, #480]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a77      	ldr	r2, [pc, #476]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 8000fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	e030      	b.n	8001032 <HAL_RCC_OscConfig+0x172>
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10c      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x134>
 8000fda:	4b72      	ldr	r3, [pc, #456]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a71      	ldr	r2, [pc, #452]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 8000fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	4b6f      	ldr	r3, [pc, #444]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a6e      	ldr	r2, [pc, #440]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 8000fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	e01e      	b.n	8001032 <HAL_RCC_OscConfig+0x172>
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ffe:	d10c      	bne.n	800101a <HAL_RCC_OscConfig+0x15a>
 8001000:	4b68      	ldr	r3, [pc, #416]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a67      	ldr	r2, [pc, #412]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 8001006:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	4b65      	ldr	r3, [pc, #404]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a64      	ldr	r2, [pc, #400]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 8001012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	e00b      	b.n	8001032 <HAL_RCC_OscConfig+0x172>
 800101a:	4b62      	ldr	r3, [pc, #392]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a61      	ldr	r2, [pc, #388]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 8001020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	4b5f      	ldr	r3, [pc, #380]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a5e      	ldr	r2, [pc, #376]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 800102c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001030:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d059      	beq.n	80010f0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103c:	f7ff fcac 	bl	8000998 <HAL_GetTick>
 8001040:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001044:	e00a      	b.n	800105c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001046:	f7ff fca7 	bl	8000998 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b64      	cmp	r3, #100	; 0x64
 8001054:	d902      	bls.n	800105c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	f000 be40 	b.w	8001cdc <HAL_RCC_OscConfig+0xe1c>
 800105c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001060:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001064:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001068:	fa93 f3a3 	rbit	r3, r3
 800106c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001070:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001074:	fab3 f383 	clz	r3, r3
 8001078:	b2db      	uxtb	r3, r3
 800107a:	095b      	lsrs	r3, r3, #5
 800107c:	b2db      	uxtb	r3, r3
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b01      	cmp	r3, #1
 8001086:	d102      	bne.n	800108e <HAL_RCC_OscConfig+0x1ce>
 8001088:	4b46      	ldr	r3, [pc, #280]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	e015      	b.n	80010ba <HAL_RCC_OscConfig+0x1fa>
 800108e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001092:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001096:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800109a:	fa93 f3a3 	rbit	r3, r3
 800109e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80010a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010aa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80010ae:	fa93 f3a3 	rbit	r3, r3
 80010b2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010b6:	4b3b      	ldr	r3, [pc, #236]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010be:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80010c2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80010c6:	fa92 f2a2 	rbit	r2, r2
 80010ca:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80010ce:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80010d2:	fab2 f282 	clz	r2, r2
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	f042 0220 	orr.w	r2, r2, #32
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	f002 021f 	and.w	r2, r2, #31
 80010e2:	2101      	movs	r1, #1
 80010e4:	fa01 f202 	lsl.w	r2, r1, r2
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0ab      	beq.n	8001046 <HAL_RCC_OscConfig+0x186>
 80010ee:	e05c      	b.n	80011aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fc52 	bl	8000998 <HAL_GetTick>
 80010f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f8:	e00a      	b.n	8001110 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010fa:	f7ff fc4d 	bl	8000998 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b64      	cmp	r3, #100	; 0x64
 8001108:	d902      	bls.n	8001110 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	f000 bde6 	b.w	8001cdc <HAL_RCC_OscConfig+0xe1c>
 8001110:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001114:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001118:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800111c:	fa93 f3a3 	rbit	r3, r3
 8001120:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001124:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001128:	fab3 f383 	clz	r3, r3
 800112c:	b2db      	uxtb	r3, r3
 800112e:	095b      	lsrs	r3, r3, #5
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b01      	cmp	r3, #1
 800113a:	d102      	bne.n	8001142 <HAL_RCC_OscConfig+0x282>
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	e015      	b.n	800116e <HAL_RCC_OscConfig+0x2ae>
 8001142:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001146:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800114e:	fa93 f3a3 	rbit	r3, r3
 8001152:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001156:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800115a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800115e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001162:	fa93 f3a3 	rbit	r3, r3
 8001166:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_RCC_OscConfig+0x2e4>)
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001172:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001176:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800117a:	fa92 f2a2 	rbit	r2, r2
 800117e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001182:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001186:	fab2 f282 	clz	r2, r2
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	f042 0220 	orr.w	r2, r2, #32
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	f002 021f 	and.w	r2, r2, #31
 8001196:	2101      	movs	r1, #1
 8001198:	fa01 f202 	lsl.w	r2, r1, r2
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1ab      	bne.n	80010fa <HAL_RCC_OscConfig+0x23a>
 80011a2:	e002      	b.n	80011aa <HAL_RCC_OscConfig+0x2ea>
 80011a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 8170 	beq.w	800149a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011ba:	4bd0      	ldr	r3, [pc, #832]	; (80014fc <HAL_RCC_OscConfig+0x63c>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00c      	beq.n	80011e0 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011c6:	4bcd      	ldr	r3, [pc, #820]	; (80014fc <HAL_RCC_OscConfig+0x63c>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d16d      	bne.n	80012ae <HAL_RCC_OscConfig+0x3ee>
 80011d2:	4bca      	ldr	r3, [pc, #808]	; (80014fc <HAL_RCC_OscConfig+0x63c>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80011da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011de:	d166      	bne.n	80012ae <HAL_RCC_OscConfig+0x3ee>
 80011e0:	2302      	movs	r3, #2
 80011e2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80011ea:	fa93 f3a3 	rbit	r3, r3
 80011ee:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80011f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f6:	fab3 f383 	clz	r3, r3
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	095b      	lsrs	r3, r3, #5
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b01      	cmp	r3, #1
 8001208:	d102      	bne.n	8001210 <HAL_RCC_OscConfig+0x350>
 800120a:	4bbc      	ldr	r3, [pc, #752]	; (80014fc <HAL_RCC_OscConfig+0x63c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	e013      	b.n	8001238 <HAL_RCC_OscConfig+0x378>
 8001210:	2302      	movs	r3, #2
 8001212:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001216:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800121a:	fa93 f3a3 	rbit	r3, r3
 800121e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001222:	2302      	movs	r3, #2
 8001224:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001228:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800122c:	fa93 f3a3 	rbit	r3, r3
 8001230:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001234:	4bb1      	ldr	r3, [pc, #708]	; (80014fc <HAL_RCC_OscConfig+0x63c>)
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	2202      	movs	r2, #2
 800123a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800123e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001242:	fa92 f2a2 	rbit	r2, r2
 8001246:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800124a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800124e:	fab2 f282 	clz	r2, r2
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	f042 0220 	orr.w	r2, r2, #32
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	f002 021f 	and.w	r2, r2, #31
 800125e:	2101      	movs	r1, #1
 8001260:	fa01 f202 	lsl.w	r2, r1, r2
 8001264:	4013      	ands	r3, r2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <HAL_RCC_OscConfig+0x3ba>
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d002      	beq.n	800127a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	f000 bd31 	b.w	8001cdc <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127a:	4ba0      	ldr	r3, [pc, #640]	; (80014fc <HAL_RCC_OscConfig+0x63c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	21f8      	movs	r1, #248	; 0xf8
 800128a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001292:	fa91 f1a1 	rbit	r1, r1
 8001296:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800129a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800129e:	fab1 f181 	clz	r1, r1
 80012a2:	b2c9      	uxtb	r1, r1
 80012a4:	408b      	lsls	r3, r1
 80012a6:	4995      	ldr	r1, [pc, #596]	; (80014fc <HAL_RCC_OscConfig+0x63c>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ac:	e0f5      	b.n	800149a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 8085 	beq.w	80013c4 <HAL_RCC_OscConfig+0x504>
 80012ba:	2301      	movs	r3, #1
 80012bc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80012c4:	fa93 f3a3 	rbit	r3, r3
 80012c8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80012cc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012d0:	fab3 f383 	clz	r3, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	461a      	mov	r2, r3
 80012e2:	2301      	movs	r3, #1
 80012e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff fb57 	bl	8000998 <HAL_GetTick>
 80012ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ee:	e00a      	b.n	8001306 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f0:	f7ff fb52 	bl	8000998 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d902      	bls.n	8001306 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	f000 bceb 	b.w	8001cdc <HAL_RCC_OscConfig+0xe1c>
 8001306:	2302      	movs	r3, #2
 8001308:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001310:	fa93 f3a3 	rbit	r3, r3
 8001314:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001318:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131c:	fab3 f383 	clz	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	b2db      	uxtb	r3, r3
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b01      	cmp	r3, #1
 800132e:	d102      	bne.n	8001336 <HAL_RCC_OscConfig+0x476>
 8001330:	4b72      	ldr	r3, [pc, #456]	; (80014fc <HAL_RCC_OscConfig+0x63c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	e013      	b.n	800135e <HAL_RCC_OscConfig+0x49e>
 8001336:	2302      	movs	r3, #2
 8001338:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001340:	fa93 f3a3 	rbit	r3, r3
 8001344:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001348:	2302      	movs	r3, #2
 800134a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800134e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001352:	fa93 f3a3 	rbit	r3, r3
 8001356:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800135a:	4b68      	ldr	r3, [pc, #416]	; (80014fc <HAL_RCC_OscConfig+0x63c>)
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	2202      	movs	r2, #2
 8001360:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001364:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001368:	fa92 f2a2 	rbit	r2, r2
 800136c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001370:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001374:	fab2 f282 	clz	r2, r2
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	f042 0220 	orr.w	r2, r2, #32
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	f002 021f 	and.w	r2, r2, #31
 8001384:	2101      	movs	r1, #1
 8001386:	fa01 f202 	lsl.w	r2, r1, r2
 800138a:	4013      	ands	r3, r2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0af      	beq.n	80012f0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001390:	4b5a      	ldr	r3, [pc, #360]	; (80014fc <HAL_RCC_OscConfig+0x63c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	21f8      	movs	r1, #248	; 0xf8
 80013a0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80013a8:	fa91 f1a1 	rbit	r1, r1
 80013ac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80013b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80013b4:	fab1 f181 	clz	r1, r1
 80013b8:	b2c9      	uxtb	r1, r1
 80013ba:	408b      	lsls	r3, r1
 80013bc:	494f      	ldr	r1, [pc, #316]	; (80014fc <HAL_RCC_OscConfig+0x63c>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]
 80013c2:	e06a      	b.n	800149a <HAL_RCC_OscConfig+0x5da>
 80013c4:	2301      	movs	r3, #1
 80013c6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ca:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80013ce:	fa93 f3a3 	rbit	r3, r3
 80013d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80013d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013da:	fab3 f383 	clz	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	461a      	mov	r2, r3
 80013ec:	2300      	movs	r3, #0
 80013ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fad2 	bl	8000998 <HAL_GetTick>
 80013f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f8:	e00a      	b.n	8001410 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013fa:	f7ff facd 	bl	8000998 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d902      	bls.n	8001410 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	f000 bc66 	b.w	8001cdc <HAL_RCC_OscConfig+0xe1c>
 8001410:	2302      	movs	r3, #2
 8001412:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001416:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001422:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001426:	fab3 f383 	clz	r3, r3
 800142a:	b2db      	uxtb	r3, r3
 800142c:	095b      	lsrs	r3, r3, #5
 800142e:	b2db      	uxtb	r3, r3
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b01      	cmp	r3, #1
 8001438:	d102      	bne.n	8001440 <HAL_RCC_OscConfig+0x580>
 800143a:	4b30      	ldr	r3, [pc, #192]	; (80014fc <HAL_RCC_OscConfig+0x63c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	e013      	b.n	8001468 <HAL_RCC_OscConfig+0x5a8>
 8001440:	2302      	movs	r3, #2
 8001442:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800144a:	fa93 f3a3 	rbit	r3, r3
 800144e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001452:	2302      	movs	r3, #2
 8001454:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001458:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800145c:	fa93 f3a3 	rbit	r3, r3
 8001460:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001464:	4b25      	ldr	r3, [pc, #148]	; (80014fc <HAL_RCC_OscConfig+0x63c>)
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	2202      	movs	r2, #2
 800146a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800146e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001472:	fa92 f2a2 	rbit	r2, r2
 8001476:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800147a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800147e:	fab2 f282 	clz	r2, r2
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	f042 0220 	orr.w	r2, r2, #32
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	f002 021f 	and.w	r2, r2, #31
 800148e:	2101      	movs	r1, #1
 8001490:	fa01 f202 	lsl.w	r2, r1, r2
 8001494:	4013      	ands	r3, r2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1af      	bne.n	80013fa <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80da 	beq.w	800165e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d069      	beq.n	8001588 <HAL_RCC_OscConfig+0x6c8>
 80014b4:	2301      	movs	r3, #1
 80014b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014be:	fa93 f3a3 	rbit	r3, r3
 80014c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80014c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ca:	fab3 f383 	clz	r3, r3
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_RCC_OscConfig+0x640>)
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	461a      	mov	r2, r3
 80014da:	2301      	movs	r3, #1
 80014dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014de:	f7ff fa5b 	bl	8000998 <HAL_GetTick>
 80014e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e6:	e00d      	b.n	8001504 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e8:	f7ff fa56 	bl	8000998 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d905      	bls.n	8001504 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e3ef      	b.n	8001cdc <HAL_RCC_OscConfig+0xe1c>
 80014fc:	40021000 	.word	0x40021000
 8001500:	10908120 	.word	0x10908120
 8001504:	2302      	movs	r3, #2
 8001506:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800150e:	fa93 f2a3 	rbit	r2, r3
 8001512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800151c:	2202      	movs	r2, #2
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	fa93 f2a3 	rbit	r2, r3
 800152a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001534:	2202      	movs	r2, #2
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	fa93 f2a3 	rbit	r2, r3
 8001542:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001546:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001548:	4ba4      	ldr	r3, [pc, #656]	; (80017dc <HAL_RCC_OscConfig+0x91c>)
 800154a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800154c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001550:	2102      	movs	r1, #2
 8001552:	6019      	str	r1, [r3, #0]
 8001554:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	fa93 f1a3 	rbit	r1, r3
 800155e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001562:	6019      	str	r1, [r3, #0]
  return result;
 8001564:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	fab3 f383 	clz	r3, r3
 800156e:	b2db      	uxtb	r3, r3
 8001570:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001574:	b2db      	uxtb	r3, r3
 8001576:	f003 031f 	and.w	r3, r3, #31
 800157a:	2101      	movs	r1, #1
 800157c:	fa01 f303 	lsl.w	r3, r1, r3
 8001580:	4013      	ands	r3, r2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0b0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x628>
 8001586:	e06a      	b.n	800165e <HAL_RCC_OscConfig+0x79e>
 8001588:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800158c:	2201      	movs	r2, #1
 800158e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001590:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	fa93 f2a3 	rbit	r2, r3
 800159a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800159e:	601a      	str	r2, [r3, #0]
  return result;
 80015a0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80015a4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a6:	fab3 f383 	clz	r3, r3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b8c      	ldr	r3, [pc, #560]	; (80017e0 <HAL_RCC_OscConfig+0x920>)
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	461a      	mov	r2, r3
 80015b6:	2300      	movs	r3, #0
 80015b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ba:	f7ff f9ed 	bl	8000998 <HAL_GetTick>
 80015be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c2:	e009      	b.n	80015d8 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c4:	f7ff f9e8 	bl	8000998 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e381      	b.n	8001cdc <HAL_RCC_OscConfig+0xe1c>
 80015d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015dc:	2202      	movs	r2, #2
 80015de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	fa93 f2a3 	rbit	r2, r3
 80015ea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015f4:	2202      	movs	r2, #2
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	fa93 f2a3 	rbit	r2, r3
 8001602:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800160c:	2202      	movs	r2, #2
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	fa93 f2a3 	rbit	r2, r3
 800161a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800161e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001620:	4b6e      	ldr	r3, [pc, #440]	; (80017dc <HAL_RCC_OscConfig+0x91c>)
 8001622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001624:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001628:	2102      	movs	r1, #2
 800162a:	6019      	str	r1, [r3, #0]
 800162c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	fa93 f1a3 	rbit	r1, r3
 8001636:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800163a:	6019      	str	r1, [r3, #0]
  return result;
 800163c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	fab3 f383 	clz	r3, r3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800164c:	b2db      	uxtb	r3, r3
 800164e:	f003 031f 	and.w	r3, r3, #31
 8001652:	2101      	movs	r1, #1
 8001654:	fa01 f303 	lsl.w	r3, r1, r3
 8001658:	4013      	ands	r3, r2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1b2      	bne.n	80015c4 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 8157 	beq.w	800191c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001674:	4b59      	ldr	r3, [pc, #356]	; (80017dc <HAL_RCC_OscConfig+0x91c>)
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d112      	bne.n	80016a6 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001680:	4b56      	ldr	r3, [pc, #344]	; (80017dc <HAL_RCC_OscConfig+0x91c>)
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	4a55      	ldr	r2, [pc, #340]	; (80017dc <HAL_RCC_OscConfig+0x91c>)
 8001686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168a:	61d3      	str	r3, [r2, #28]
 800168c:	4b53      	ldr	r3, [pc, #332]	; (80017dc <HAL_RCC_OscConfig+0x91c>)
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016a0:	2301      	movs	r3, #1
 80016a2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a6:	4b4f      	ldr	r3, [pc, #316]	; (80017e4 <HAL_RCC_OscConfig+0x924>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d11a      	bne.n	80016e8 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016b2:	4b4c      	ldr	r3, [pc, #304]	; (80017e4 <HAL_RCC_OscConfig+0x924>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a4b      	ldr	r2, [pc, #300]	; (80017e4 <HAL_RCC_OscConfig+0x924>)
 80016b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016be:	f7ff f96b 	bl	8000998 <HAL_GetTick>
 80016c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c6:	e009      	b.n	80016dc <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c8:	f7ff f966 	bl	8000998 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b64      	cmp	r3, #100	; 0x64
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e2ff      	b.n	8001cdc <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016dc:	4b41      	ldr	r3, [pc, #260]	; (80017e4 <HAL_RCC_OscConfig+0x924>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0ef      	beq.n	80016c8 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d106      	bne.n	8001700 <HAL_RCC_OscConfig+0x840>
 80016f2:	4b3a      	ldr	r3, [pc, #232]	; (80017dc <HAL_RCC_OscConfig+0x91c>)
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	4a39      	ldr	r2, [pc, #228]	; (80017dc <HAL_RCC_OscConfig+0x91c>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6213      	str	r3, [r2, #32]
 80016fe:	e02f      	b.n	8001760 <HAL_RCC_OscConfig+0x8a0>
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10c      	bne.n	8001724 <HAL_RCC_OscConfig+0x864>
 800170a:	4b34      	ldr	r3, [pc, #208]	; (80017dc <HAL_RCC_OscConfig+0x91c>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	4a33      	ldr	r2, [pc, #204]	; (80017dc <HAL_RCC_OscConfig+0x91c>)
 8001710:	f023 0301 	bic.w	r3, r3, #1
 8001714:	6213      	str	r3, [r2, #32]
 8001716:	4b31      	ldr	r3, [pc, #196]	; (80017dc <HAL_RCC_OscConfig+0x91c>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4a30      	ldr	r2, [pc, #192]	; (80017dc <HAL_RCC_OscConfig+0x91c>)
 800171c:	f023 0304 	bic.w	r3, r3, #4
 8001720:	6213      	str	r3, [r2, #32]
 8001722:	e01d      	b.n	8001760 <HAL_RCC_OscConfig+0x8a0>
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b05      	cmp	r3, #5
 800172c:	d10c      	bne.n	8001748 <HAL_RCC_OscConfig+0x888>
 800172e:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <HAL_RCC_OscConfig+0x91c>)
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	4a2a      	ldr	r2, [pc, #168]	; (80017dc <HAL_RCC_OscConfig+0x91c>)
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	6213      	str	r3, [r2, #32]
 800173a:	4b28      	ldr	r3, [pc, #160]	; (80017dc <HAL_RCC_OscConfig+0x91c>)
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	4a27      	ldr	r2, [pc, #156]	; (80017dc <HAL_RCC_OscConfig+0x91c>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6213      	str	r3, [r2, #32]
 8001746:	e00b      	b.n	8001760 <HAL_RCC_OscConfig+0x8a0>
 8001748:	4b24      	ldr	r3, [pc, #144]	; (80017dc <HAL_RCC_OscConfig+0x91c>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4a23      	ldr	r2, [pc, #140]	; (80017dc <HAL_RCC_OscConfig+0x91c>)
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	6213      	str	r3, [r2, #32]
 8001754:	4b21      	ldr	r3, [pc, #132]	; (80017dc <HAL_RCC_OscConfig+0x91c>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	4a20      	ldr	r2, [pc, #128]	; (80017dc <HAL_RCC_OscConfig+0x91c>)
 800175a:	f023 0304 	bic.w	r3, r3, #4
 800175e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d06a      	beq.n	8001840 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176a:	f7ff f915 	bl	8000998 <HAL_GetTick>
 800176e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001772:	e00b      	b.n	800178c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001774:	f7ff f910 	bl	8000998 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	f241 3288 	movw	r2, #5000	; 0x1388
 8001784:	4293      	cmp	r3, r2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e2a7      	b.n	8001cdc <HAL_RCC_OscConfig+0xe1c>
 800178c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001790:	2202      	movs	r2, #2
 8001792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001794:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	fa93 f2a3 	rbit	r2, r3
 800179e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017a8:	2202      	movs	r2, #2
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	fa93 f2a3 	rbit	r2, r3
 80017b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80017ba:	601a      	str	r2, [r3, #0]
  return result;
 80017bc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80017c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c2:	fab3 f383 	clz	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	095b      	lsrs	r3, r3, #5
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d108      	bne.n	80017e8 <HAL_RCC_OscConfig+0x928>
 80017d6:	4b01      	ldr	r3, [pc, #4]	; (80017dc <HAL_RCC_OscConfig+0x91c>)
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	e013      	b.n	8001804 <HAL_RCC_OscConfig+0x944>
 80017dc:	40021000 	.word	0x40021000
 80017e0:	10908120 	.word	0x10908120
 80017e4:	40007000 	.word	0x40007000
 80017e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017ec:	2202      	movs	r2, #2
 80017ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	fa93 f2a3 	rbit	r2, r3
 80017fa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	4bc0      	ldr	r3, [pc, #768]	; (8001b04 <HAL_RCC_OscConfig+0xc44>)
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001808:	2102      	movs	r1, #2
 800180a:	6011      	str	r1, [r2, #0]
 800180c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	fa92 f1a2 	rbit	r1, r2
 8001816:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800181a:	6011      	str	r1, [r2, #0]
  return result;
 800181c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	fab2 f282 	clz	r2, r2
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	f002 021f 	and.w	r2, r2, #31
 8001832:	2101      	movs	r1, #1
 8001834:	fa01 f202 	lsl.w	r2, r1, r2
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d09a      	beq.n	8001774 <HAL_RCC_OscConfig+0x8b4>
 800183e:	e063      	b.n	8001908 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001840:	f7ff f8aa 	bl	8000998 <HAL_GetTick>
 8001844:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001848:	e00b      	b.n	8001862 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800184a:	f7ff f8a5 	bl	8000998 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	; 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e23c      	b.n	8001cdc <HAL_RCC_OscConfig+0xe1c>
 8001862:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001866:	2202      	movs	r2, #2
 8001868:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	fa93 f2a3 	rbit	r2, r3
 8001874:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800187e:	2202      	movs	r2, #2
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	fa93 f2a3 	rbit	r2, r3
 800188c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001890:	601a      	str	r2, [r3, #0]
  return result;
 8001892:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001896:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001898:	fab3 f383 	clz	r3, r3
 800189c:	b2db      	uxtb	r3, r3
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d102      	bne.n	80018b2 <HAL_RCC_OscConfig+0x9f2>
 80018ac:	4b95      	ldr	r3, [pc, #596]	; (8001b04 <HAL_RCC_OscConfig+0xc44>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	e00d      	b.n	80018ce <HAL_RCC_OscConfig+0xa0e>
 80018b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018b6:	2202      	movs	r2, #2
 80018b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	fa93 f2a3 	rbit	r2, r3
 80018c4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	4b8e      	ldr	r3, [pc, #568]	; (8001b04 <HAL_RCC_OscConfig+0xc44>)
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80018d2:	2102      	movs	r1, #2
 80018d4:	6011      	str	r1, [r2, #0]
 80018d6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	fa92 f1a2 	rbit	r1, r2
 80018e0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018e4:	6011      	str	r1, [r2, #0]
  return result;
 80018e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	fab2 f282 	clz	r2, r2
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	f002 021f 	and.w	r2, r2, #31
 80018fc:	2101      	movs	r1, #1
 80018fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001902:	4013      	ands	r3, r2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1a0      	bne.n	800184a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001908:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001910:	4b7c      	ldr	r3, [pc, #496]	; (8001b04 <HAL_RCC_OscConfig+0xc44>)
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	4a7b      	ldr	r2, [pc, #492]	; (8001b04 <HAL_RCC_OscConfig+0xc44>)
 8001916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800191a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 81d9 	beq.w	8001cda <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001928:	4b76      	ldr	r3, [pc, #472]	; (8001b04 <HAL_RCC_OscConfig+0xc44>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b08      	cmp	r3, #8
 8001932:	f000 81a6 	beq.w	8001c82 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	2b02      	cmp	r3, #2
 800193e:	f040 811e 	bne.w	8001b7e <HAL_RCC_OscConfig+0xcbe>
 8001942:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001946:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800194a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	fa93 f2a3 	rbit	r2, r3
 8001956:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800195a:	601a      	str	r2, [r3, #0]
  return result;
 800195c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001960:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001962:	fab3 f383 	clz	r3, r3
 8001966:	b2db      	uxtb	r3, r3
 8001968:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800196c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	461a      	mov	r2, r3
 8001974:	2300      	movs	r3, #0
 8001976:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff f80e 	bl	8000998 <HAL_GetTick>
 800197c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001980:	e009      	b.n	8001996 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001982:	f7ff f809 	bl	8000998 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e1a2      	b.n	8001cdc <HAL_RCC_OscConfig+0xe1c>
 8001996:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800199a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800199e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	fa93 f2a3 	rbit	r2, r3
 80019aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019ae:	601a      	str	r2, [r3, #0]
  return result;
 80019b0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b6:	fab3 f383 	clz	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	095b      	lsrs	r3, r3, #5
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d102      	bne.n	80019d0 <HAL_RCC_OscConfig+0xb10>
 80019ca:	4b4e      	ldr	r3, [pc, #312]	; (8001b04 <HAL_RCC_OscConfig+0xc44>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	e01b      	b.n	8001a08 <HAL_RCC_OscConfig+0xb48>
 80019d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	fa93 f2a3 	rbit	r2, r3
 80019e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	fa93 f2a3 	rbit	r2, r3
 80019fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	4b3f      	ldr	r3, [pc, #252]	; (8001b04 <HAL_RCC_OscConfig+0xc44>)
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001a0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a10:	6011      	str	r1, [r2, #0]
 8001a12:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	fa92 f1a2 	rbit	r1, r2
 8001a1c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a20:	6011      	str	r1, [r2, #0]
  return result;
 8001a22:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	fab2 f282 	clz	r2, r2
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	f042 0220 	orr.w	r2, r2, #32
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	f002 021f 	and.w	r2, r2, #31
 8001a38:	2101      	movs	r1, #1
 8001a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d19e      	bne.n	8001982 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a44:	4b2f      	ldr	r3, [pc, #188]	; (8001b04 <HAL_RCC_OscConfig+0xc44>)
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	f023 020f 	bic.w	r2, r3, #15
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	492c      	ldr	r1, [pc, #176]	; (8001b04 <HAL_RCC_OscConfig+0xc44>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001a58:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <HAL_RCC_OscConfig+0xc44>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6a19      	ldr	r1, [r3, #32]
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	430b      	orrs	r3, r1
 8001a6e:	4925      	ldr	r1, [pc, #148]	; (8001b04 <HAL_RCC_OscConfig+0xc44>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]
 8001a74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	fa93 f2a3 	rbit	r2, r3
 8001a88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a8c:	601a      	str	r2, [r3, #0]
  return result;
 8001a8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a92:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a94:	fab3 f383 	clz	r3, r3
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7fe ff75 	bl	8000998 <HAL_GetTick>
 8001aae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab2:	e009      	b.n	8001ac8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab4:	f7fe ff70 	bl	8000998 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e109      	b.n	8001cdc <HAL_RCC_OscConfig+0xe1c>
 8001ac8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001acc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	fa93 f2a3 	rbit	r2, r3
 8001adc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ae0:	601a      	str	r2, [r3, #0]
  return result;
 8001ae2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ae6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae8:	fab3 f383 	clz	r3, r3
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	095b      	lsrs	r3, r3, #5
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d105      	bne.n	8001b08 <HAL_RCC_OscConfig+0xc48>
 8001afc:	4b01      	ldr	r3, [pc, #4]	; (8001b04 <HAL_RCC_OscConfig+0xc44>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	e01e      	b.n	8001b40 <HAL_RCC_OscConfig+0xc80>
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	fa93 f2a3 	rbit	r2, r3
 8001b1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	fa93 f2a3 	rbit	r2, r3
 8001b36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	4b6a      	ldr	r3, [pc, #424]	; (8001ce8 <HAL_RCC_OscConfig+0xe28>)
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001b44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b48:	6011      	str	r1, [r2, #0]
 8001b4a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	fa92 f1a2 	rbit	r1, r2
 8001b54:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b58:	6011      	str	r1, [r2, #0]
  return result;
 8001b5a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	fab2 f282 	clz	r2, r2
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	f042 0220 	orr.w	r2, r2, #32
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	f002 021f 	and.w	r2, r2, #31
 8001b70:	2101      	movs	r1, #1
 8001b72:	fa01 f202 	lsl.w	r2, r1, r2
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d09b      	beq.n	8001ab4 <HAL_RCC_OscConfig+0xbf4>
 8001b7c:	e0ad      	b.n	8001cda <HAL_RCC_OscConfig+0xe1a>
 8001b7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	fa93 f2a3 	rbit	r2, r3
 8001b92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b96:	601a      	str	r2, [r3, #0]
  return result;
 8001b98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b9c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9e:	fab3 f383 	clz	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ba8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	461a      	mov	r2, r3
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7fe fef0 	bl	8000998 <HAL_GetTick>
 8001bb8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbc:	e009      	b.n	8001bd2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bbe:	f7fe feeb 	bl	8000998 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e084      	b.n	8001cdc <HAL_RCC_OscConfig+0xe1c>
 8001bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	fa93 f2a3 	rbit	r2, r3
 8001be6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bea:	601a      	str	r2, [r3, #0]
  return result;
 8001bec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bf0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	095b      	lsrs	r3, r3, #5
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d102      	bne.n	8001c0c <HAL_RCC_OscConfig+0xd4c>
 8001c06:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <HAL_RCC_OscConfig+0xe28>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	e01b      	b.n	8001c44 <HAL_RCC_OscConfig+0xd84>
 8001c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	fa93 f2a3 	rbit	r2, r3
 8001c20:	f107 0320 	add.w	r3, r7, #32
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	f107 031c 	add.w	r3, r7, #28
 8001c2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	fa93 f2a3 	rbit	r2, r3
 8001c3a:	f107 0318 	add.w	r3, r7, #24
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	4b29      	ldr	r3, [pc, #164]	; (8001ce8 <HAL_RCC_OscConfig+0xe28>)
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	f107 0214 	add.w	r2, r7, #20
 8001c48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c4c:	6011      	str	r1, [r2, #0]
 8001c4e:	f107 0214 	add.w	r2, r7, #20
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	fa92 f1a2 	rbit	r1, r2
 8001c58:	f107 0210 	add.w	r2, r7, #16
 8001c5c:	6011      	str	r1, [r2, #0]
  return result;
 8001c5e:	f107 0210 	add.w	r2, r7, #16
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	fab2 f282 	clz	r2, r2
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	f042 0220 	orr.w	r2, r2, #32
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	f002 021f 	and.w	r2, r2, #31
 8001c74:	2101      	movs	r1, #1
 8001c76:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d19e      	bne.n	8001bbe <HAL_RCC_OscConfig+0xcfe>
 8001c80:	e02b      	b.n	8001cda <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e025      	b.n	8001cdc <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c90:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_RCC_OscConfig+0xe28>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <HAL_RCC_OscConfig+0xe28>)
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ca0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001ca4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d111      	bne.n	8001cd6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001cb2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001cb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d108      	bne.n	8001cd6 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001cc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cc8:	f003 020f 	and.w	r2, r3, #15
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000

08001cec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b09e      	sub	sp, #120	; 0x78
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e162      	b.n	8001fca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d04:	4b90      	ldr	r3, [pc, #576]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d910      	bls.n	8001d34 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b8d      	ldr	r3, [pc, #564]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 0207 	bic.w	r2, r3, #7
 8001d1a:	498b      	ldr	r1, [pc, #556]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	4b89      	ldr	r3, [pc, #548]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e14a      	b.n	8001fca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d40:	4b82      	ldr	r3, [pc, #520]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	497f      	ldr	r1, [pc, #508]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80dc 	beq.w	8001f18 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d13c      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xf6>
 8001d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d6c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d78:	fab3 f383 	clz	r3, r3
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d102      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xa6>
 8001d8c:	4b6f      	ldr	r3, [pc, #444]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	e00f      	b.n	8001db2 <HAL_RCC_ClockConfig+0xc6>
 8001d92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	667b      	str	r3, [r7, #100]	; 0x64
 8001da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da4:	663b      	str	r3, [r7, #96]	; 0x60
 8001da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dae:	4b67      	ldr	r3, [pc, #412]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001db6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001db8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dba:	fa92 f2a2 	rbit	r2, r2
 8001dbe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001dc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dc2:	fab2 f282 	clz	r2, r2
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	f042 0220 	orr.w	r2, r2, #32
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	f002 021f 	and.w	r2, r2, #31
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d17b      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e0f3      	b.n	8001fca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d13c      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x178>
 8001dea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001df2:	fa93 f3a3 	rbit	r3, r3
 8001df6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	095b      	lsrs	r3, r3, #5
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d102      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x128>
 8001e0e:	4b4f      	ldr	r3, [pc, #316]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	e00f      	b.n	8001e34 <HAL_RCC_ClockConfig+0x148>
 8001e14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	647b      	str	r3, [r7, #68]	; 0x44
 8001e22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e26:	643b      	str	r3, [r7, #64]	; 0x40
 8001e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e30:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e38:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e3c:	fa92 f2a2 	rbit	r2, r2
 8001e40:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e44:	fab2 f282 	clz	r2, r2
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	f042 0220 	orr.w	r2, r2, #32
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	f002 021f 	and.w	r2, r2, #31
 8001e54:	2101      	movs	r1, #1
 8001e56:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d13a      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0b2      	b.n	8001fca <HAL_RCC_ClockConfig+0x2de>
 8001e64:	2302      	movs	r3, #2
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e72:	fab3 f383 	clz	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	095b      	lsrs	r3, r3, #5
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d102      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x1a0>
 8001e86:	4b31      	ldr	r3, [pc, #196]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	e00d      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x1bc>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
 8001e98:	2302      	movs	r3, #2
 8001e9a:	623b      	str	r3, [r7, #32]
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	61fb      	str	r3, [r7, #28]
 8001ea4:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	61ba      	str	r2, [r7, #24]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	fa92 f2a2 	rbit	r2, r2
 8001eb2:	617a      	str	r2, [r7, #20]
  return result;
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	fab2 f282 	clz	r2, r2
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	f042 0220 	orr.w	r2, r2, #32
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	f002 021f 	and.w	r2, r2, #31
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e079      	b.n	8001fca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f023 0203 	bic.w	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	491a      	ldr	r1, [pc, #104]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee8:	f7fe fd56 	bl	8000998 <HAL_GetTick>
 8001eec:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	e00a      	b.n	8001f06 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef0:	f7fe fd52 	bl	8000998 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e061      	b.n	8001fca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 020c 	and.w	r2, r3, #12
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d1eb      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d214      	bcs.n	8001f50 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 0207 	bic.w	r2, r3, #7
 8001f2e:	4906      	ldr	r1, [pc, #24]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e040      	b.n	8001fca <HAL_RCC_ClockConfig+0x2de>
 8001f48:	40022000 	.word	0x40022000
 8001f4c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	491a      	ldr	r1, [pc, #104]	; (8001fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d009      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f7a:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4912      	ldr	r1, [pc, #72]	; (8001fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f8e:	f000 f829 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8001f92:	4601      	mov	r1, r0
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f9c:	22f0      	movs	r2, #240	; 0xf0
 8001f9e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	fa92 f2a2 	rbit	r2, r2
 8001fa6:	60fa      	str	r2, [r7, #12]
  return result;
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	fab2 f282 	clz	r2, r2
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	40d3      	lsrs	r3, r2
 8001fb2:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <HAL_RCC_ClockConfig+0x2ec>)
 8001fb4:	5cd3      	ldrb	r3, [r2, r3]
 8001fb6:	fa21 f303 	lsr.w	r3, r1, r3
 8001fba:	4a08      	ldr	r2, [pc, #32]	; (8001fdc <HAL_RCC_ClockConfig+0x2f0>)
 8001fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <HAL_RCC_ClockConfig+0x2f4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fca4 	bl	8000910 <HAL_InitTick>
  
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3778      	adds	r7, #120	; 0x78
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	080044f8 	.word	0x080044f8
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	20000004 	.word	0x20000004

08001fe4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b08b      	sub	sp, #44	; 0x2c
 8001fe8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001ffe:	4b2a      	ldr	r3, [pc, #168]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b04      	cmp	r3, #4
 800200c:	d002      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x30>
 800200e:	2b08      	cmp	r3, #8
 8002010:	d003      	beq.n	800201a <HAL_RCC_GetSysClockFreq+0x36>
 8002012:	e03f      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002014:	4b25      	ldr	r3, [pc, #148]	; (80020ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8002016:	623b      	str	r3, [r7, #32]
      break;
 8002018:	e03f      	b.n	800209a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002020:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002024:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	fa92 f2a2 	rbit	r2, r2
 800202c:	607a      	str	r2, [r7, #4]
  return result;
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	fab2 f282 	clz	r2, r2
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	40d3      	lsrs	r3, r2
 8002038:	4a1d      	ldr	r2, [pc, #116]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800203e:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	220f      	movs	r2, #15
 8002048:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	fa92 f2a2 	rbit	r2, r2
 8002050:	60fa      	str	r2, [r7, #12]
  return result;
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	fab2 f282 	clz	r2, r2
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	40d3      	lsrs	r3, r2
 800205c:	4a15      	ldr	r2, [pc, #84]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800205e:	5cd3      	ldrb	r3, [r2, r3]
 8002060:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d008      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800206c:	4a0f      	ldr	r2, [pc, #60]	; (80020ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	fbb2 f2f3 	udiv	r2, r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fb02 f303 	mul.w	r3, r2, r3
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
 800207c:	e007      	b.n	800208e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800207e:	4a0b      	ldr	r2, [pc, #44]	; (80020ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	fbb2 f2f3 	udiv	r2, r2, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fb02 f303 	mul.w	r3, r2, r3
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	623b      	str	r3, [r7, #32]
      break;
 8002092:	e002      	b.n	800209a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <HAL_RCC_GetSysClockFreq+0xc8>)
 8002096:	623b      	str	r3, [r7, #32]
      break;
 8002098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800209a:	6a3b      	ldr	r3, [r7, #32]
}
 800209c:	4618      	mov	r0, r3
 800209e:	372c      	adds	r7, #44	; 0x2c
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	40021000 	.word	0x40021000
 80020ac:	007a1200 	.word	0x007a1200
 80020b0:	08004510 	.word	0x08004510
 80020b4:	08004520 	.word	0x08004520

080020b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <HAL_RCC_GetHCLKFreq+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000000 	.word	0x20000000

080020d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020d6:	f7ff ffef 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 80020da:	4601      	mov	r1, r0
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020e4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80020e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	fa92 f2a2 	rbit	r2, r2
 80020f0:	603a      	str	r2, [r7, #0]
  return result;
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	fab2 f282 	clz	r2, r2
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	40d3      	lsrs	r3, r2
 80020fc:	4a04      	ldr	r2, [pc, #16]	; (8002110 <HAL_RCC_GetPCLK1Freq+0x40>)
 80020fe:	5cd3      	ldrb	r3, [r2, r3]
 8002100:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40021000 	.word	0x40021000
 8002110:	08004508 	.word	0x08004508

08002114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800211a:	f7ff ffcd 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 800211e:	4601      	mov	r1, r0
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002128:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800212c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	fa92 f2a2 	rbit	r2, r2
 8002134:	603a      	str	r2, [r7, #0]
  return result;
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	fab2 f282 	clz	r2, r2
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	40d3      	lsrs	r3, r2
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002142:	5cd3      	ldrb	r3, [r2, r3]
 8002144:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	08004508 	.word	0x08004508

08002158 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b092      	sub	sp, #72	; 0x48
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002168:	2300      	movs	r3, #0
 800216a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 80d4 	beq.w	8002324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217c:	4b4e      	ldr	r3, [pc, #312]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10e      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002188:	4b4b      	ldr	r3, [pc, #300]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	4a4a      	ldr	r2, [pc, #296]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002192:	61d3      	str	r3, [r2, #28]
 8002194:	4b48      	ldr	r3, [pc, #288]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a0:	2301      	movs	r3, #1
 80021a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a6:	4b45      	ldr	r3, [pc, #276]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d118      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021b2:	4b42      	ldr	r3, [pc, #264]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a41      	ldr	r2, [pc, #260]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021be:	f7fe fbeb 	bl	8000998 <HAL_GetTick>
 80021c2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c4:	e008      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c6:	f7fe fbe7 	bl	8000998 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b64      	cmp	r3, #100	; 0x64
 80021d2:	d901      	bls.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e1d6      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d8:	4b38      	ldr	r3, [pc, #224]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021e4:	4b34      	ldr	r3, [pc, #208]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 8084 	beq.w	80022fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002200:	429a      	cmp	r2, r3
 8002202:	d07c      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002204:	4b2c      	ldr	r3, [pc, #176]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800220c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800220e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002212:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800221c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	461a      	mov	r2, r3
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	461a      	mov	r2, r3
 800222e:	2301      	movs	r3, #1
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002236:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002242:	fab3 f383 	clz	r3, r3
 8002246:	b2db      	uxtb	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	461a      	mov	r2, r3
 8002252:	2300      	movs	r3, #0
 8002254:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002256:	4a18      	ldr	r2, [pc, #96]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800225a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800225c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d04b      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7fe fb97 	bl	8000998 <HAL_GetTick>
 800226a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226c:	e00a      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226e:	f7fe fb93 	bl	8000998 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	f241 3288 	movw	r2, #5000	; 0x1388
 800227c:	4293      	cmp	r3, r2
 800227e:	d901      	bls.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e180      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002284:	2302      	movs	r3, #2
 8002286:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
 8002290:	2302      	movs	r3, #2
 8002292:	623b      	str	r3, [r7, #32]
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	61fb      	str	r3, [r7, #28]
  return result;
 800229c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	095b      	lsrs	r3, r3, #5
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d108      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80022b2:	4b01      	ldr	r3, [pc, #4]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	e00d      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40007000 	.word	0x40007000
 80022c0:	10908100 	.word	0x10908100
 80022c4:	2302      	movs	r3, #2
 80022c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	4ba0      	ldr	r3, [pc, #640]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	2202      	movs	r2, #2
 80022d6:	613a      	str	r2, [r7, #16]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	fa92 f2a2 	rbit	r2, r2
 80022de:	60fa      	str	r2, [r7, #12]
  return result;
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	fab2 f282 	clz	r2, r2
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	f002 021f 	and.w	r2, r2, #31
 80022f2:	2101      	movs	r1, #1
 80022f4:	fa01 f202 	lsl.w	r2, r1, r2
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0b7      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80022fe:	4b95      	ldr	r3, [pc, #596]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	4992      	ldr	r1, [pc, #584]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800230c:	4313      	orrs	r3, r2
 800230e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002310:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002314:	2b01      	cmp	r3, #1
 8002316:	d105      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002318:	4b8e      	ldr	r3, [pc, #568]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	4a8d      	ldr	r2, [pc, #564]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800231e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002322:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002330:	4b88      	ldr	r3, [pc, #544]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	f023 0203 	bic.w	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	4985      	ldr	r1, [pc, #532]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800233e:	4313      	orrs	r3, r2
 8002340:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d008      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800234e:	4b81      	ldr	r3, [pc, #516]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	497e      	ldr	r1, [pc, #504]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800235c:	4313      	orrs	r3, r2
 800235e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800236c:	4b79      	ldr	r3, [pc, #484]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	4976      	ldr	r1, [pc, #472]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800237a:	4313      	orrs	r3, r2
 800237c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	2b00      	cmp	r3, #0
 8002388:	d008      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800238a:	4b72      	ldr	r3, [pc, #456]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f023 0210 	bic.w	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	496f      	ldr	r1, [pc, #444]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002398:	4313      	orrs	r3, r2
 800239a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80023a8:	4b6a      	ldr	r3, [pc, #424]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b4:	4967      	ldr	r1, [pc, #412]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d008      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023c6:	4b63      	ldr	r3, [pc, #396]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f023 0220 	bic.w	r2, r3, #32
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4960      	ldr	r1, [pc, #384]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023e4:	4b5b      	ldr	r3, [pc, #364]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	4958      	ldr	r1, [pc, #352]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d008      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002402:	4b54      	ldr	r3, [pc, #336]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	4951      	ldr	r1, [pc, #324]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002410:	4313      	orrs	r3, r2
 8002412:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002420:	4b4c      	ldr	r3, [pc, #304]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	4949      	ldr	r1, [pc, #292]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800242e:	4313      	orrs	r3, r2
 8002430:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800243e:	4b45      	ldr	r3, [pc, #276]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4942      	ldr	r1, [pc, #264]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800245c:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	493a      	ldr	r1, [pc, #232]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800246a:	4313      	orrs	r3, r2
 800246c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800247a:	4b36      	ldr	r3, [pc, #216]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002486:	4933      	ldr	r1, [pc, #204]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002488:	4313      	orrs	r3, r2
 800248a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002498:	4b2e      	ldr	r3, [pc, #184]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a4:	492b      	ldr	r1, [pc, #172]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80024b6:	4b27      	ldr	r3, [pc, #156]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	4924      	ldr	r1, [pc, #144]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80024d4:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e0:	491c      	ldr	r1, [pc, #112]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80024f2:	4b18      	ldr	r3, [pc, #96]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fe:	4915      	ldr	r1, [pc, #84]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002500:	4313      	orrs	r3, r2
 8002502:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002510:	4b10      	ldr	r3, [pc, #64]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	490d      	ldr	r1, [pc, #52]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800251e:	4313      	orrs	r3, r2
 8002520:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d008      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800253a:	4906      	ldr	r1, [pc, #24]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800253c:	4313      	orrs	r3, r2
 800253e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00c      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800254c:	4b01      	ldr	r3, [pc, #4]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	e002      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000
 8002558:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002560:	490b      	ldr	r1, [pc, #44]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002562:	4313      	orrs	r3, r2
 8002564:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d008      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800257e:	4904      	ldr	r1, [pc, #16]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002580:	4313      	orrs	r3, r2
 8002582:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3748      	adds	r7, #72	; 0x48
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000

08002594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e040      	b.n	8002628 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7fe f826 	bl	8000608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2224      	movs	r2, #36	; 0x24
 80025c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0201 	bic.w	r2, r2, #1
 80025d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f980 	bl	80028d8 <UART_SetConfig>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e022      	b.n	8002628 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fb48 	bl	8002c80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800260e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 fbcf 	bl	8002dc4 <UART_CheckIdleState>
 8002626:	4603      	mov	r3, r0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	; 0x28
 8002634:	af02      	add	r7, sp, #8
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	4613      	mov	r3, r2
 800263e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002644:	2b20      	cmp	r3, #32
 8002646:	d178      	bne.n	800273a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <HAL_UART_Transmit+0x24>
 800264e:	88fb      	ldrh	r3, [r7, #6]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e071      	b.n	800273c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2221      	movs	r2, #33	; 0x21
 8002664:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002666:	f7fe f997 	bl	8000998 <HAL_GetTick>
 800266a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	88fa      	ldrh	r2, [r7, #6]
 8002670:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	88fa      	ldrh	r2, [r7, #6]
 8002678:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002684:	d108      	bne.n	8002698 <HAL_UART_Transmit+0x68>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d104      	bne.n	8002698 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	e003      	b.n	80026a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800269c:	2300      	movs	r3, #0
 800269e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026a0:	e030      	b.n	8002704 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2200      	movs	r2, #0
 80026aa:	2180      	movs	r1, #128	; 0x80
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 fc31 	bl	8002f14 <UART_WaitOnFlagUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2220      	movs	r2, #32
 80026bc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e03c      	b.n	800273c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10b      	bne.n	80026e0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	881a      	ldrh	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026d4:	b292      	uxth	r2, r2
 80026d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	3302      	adds	r3, #2
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	e008      	b.n	80026f2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	781a      	ldrb	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	b292      	uxth	r2, r2
 80026ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	3301      	adds	r3, #1
 80026f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1c8      	bne.n	80026a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2200      	movs	r2, #0
 8002718:	2140      	movs	r1, #64	; 0x40
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 fbfa 	bl	8002f14 <UART_WaitOnFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d004      	beq.n	8002730 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2220      	movs	r2, #32
 800272a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e005      	b.n	800273c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2220      	movs	r2, #32
 8002734:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	e000      	b.n	800273c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800273a:	2302      	movs	r3, #2
  }
}
 800273c:	4618      	mov	r0, r3
 800273e:	3720      	adds	r7, #32
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	; 0x28
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	4613      	mov	r3, r2
 8002752:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800275a:	2b20      	cmp	r3, #32
 800275c:	f040 80b6 	bne.w	80028cc <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <HAL_UART_Receive+0x28>
 8002766:	88fb      	ldrh	r3, [r7, #6]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0ae      	b.n	80028ce <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2222      	movs	r2, #34	; 0x22
 800277c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002786:	f7fe f907 	bl	8000998 <HAL_GetTick>
 800278a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	88fa      	ldrh	r2, [r7, #6]
 8002790:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	88fa      	ldrh	r2, [r7, #6]
 8002798:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a4:	d10e      	bne.n	80027c4 <HAL_UART_Receive+0x80>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d105      	bne.n	80027ba <HAL_UART_Receive+0x76>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80027b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027b8:	e02d      	b.n	8002816 <HAL_UART_Receive+0xd2>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	22ff      	movs	r2, #255	; 0xff
 80027be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027c2:	e028      	b.n	8002816 <HAL_UART_Receive+0xd2>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10d      	bne.n	80027e8 <HAL_UART_Receive+0xa4>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d104      	bne.n	80027de <HAL_UART_Receive+0x9a>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	22ff      	movs	r2, #255	; 0xff
 80027d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027dc:	e01b      	b.n	8002816 <HAL_UART_Receive+0xd2>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	227f      	movs	r2, #127	; 0x7f
 80027e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027e6:	e016      	b.n	8002816 <HAL_UART_Receive+0xd2>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027f0:	d10d      	bne.n	800280e <HAL_UART_Receive+0xca>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d104      	bne.n	8002804 <HAL_UART_Receive+0xc0>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	227f      	movs	r2, #127	; 0x7f
 80027fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002802:	e008      	b.n	8002816 <HAL_UART_Receive+0xd2>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	223f      	movs	r2, #63	; 0x3f
 8002808:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800280c:	e003      	b.n	8002816 <HAL_UART_Receive+0xd2>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800281c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002826:	d108      	bne.n	800283a <HAL_UART_Receive+0xf6>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d104      	bne.n	800283a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002830:	2300      	movs	r3, #0
 8002832:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	61bb      	str	r3, [r7, #24]
 8002838:	e003      	b.n	8002842 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002842:	e037      	b.n	80028b4 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2200      	movs	r2, #0
 800284c:	2120      	movs	r1, #32
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 fb60 	bl	8002f14 <UART_WaitOnFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e033      	b.n	80028ce <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10c      	bne.n	8002886 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002872:	b29a      	uxth	r2, r3
 8002874:	8a7b      	ldrh	r3, [r7, #18]
 8002876:	4013      	ands	r3, r2
 8002878:	b29a      	uxth	r2, r3
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	3302      	adds	r3, #2
 8002882:	61bb      	str	r3, [r7, #24]
 8002884:	e00d      	b.n	80028a2 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800288c:	b29b      	uxth	r3, r3
 800288e:	b2da      	uxtb	r2, r3
 8002890:	8a7b      	ldrh	r3, [r7, #18]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	4013      	ands	r3, r2
 8002896:	b2da      	uxtb	r2, r3
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	3301      	adds	r3, #1
 80028a0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1c1      	bne.n	8002844 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e000      	b.n	80028ce <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80028cc:	2302      	movs	r3, #2
  }
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3720      	adds	r7, #32
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	4baa      	ldr	r3, [pc, #680]	; (8002bac <UART_SetConfig+0x2d4>)
 8002904:	4013      	ands	r3, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6812      	ldr	r2, [r2, #0]
 800290a:	6979      	ldr	r1, [r7, #20]
 800290c:	430b      	orrs	r3, r1
 800290e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	430a      	orrs	r2, r1
 8002948:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a98      	ldr	r2, [pc, #608]	; (8002bb0 <UART_SetConfig+0x2d8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d120      	bne.n	8002996 <UART_SetConfig+0xbe>
 8002954:	4b97      	ldr	r3, [pc, #604]	; (8002bb4 <UART_SetConfig+0x2dc>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	2b03      	cmp	r3, #3
 800295e:	d817      	bhi.n	8002990 <UART_SetConfig+0xb8>
 8002960:	a201      	add	r2, pc, #4	; (adr r2, 8002968 <UART_SetConfig+0x90>)
 8002962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002966:	bf00      	nop
 8002968:	08002979 	.word	0x08002979
 800296c:	08002985 	.word	0x08002985
 8002970:	0800298b 	.word	0x0800298b
 8002974:	0800297f 	.word	0x0800297f
 8002978:	2301      	movs	r3, #1
 800297a:	77fb      	strb	r3, [r7, #31]
 800297c:	e0b5      	b.n	8002aea <UART_SetConfig+0x212>
 800297e:	2302      	movs	r3, #2
 8002980:	77fb      	strb	r3, [r7, #31]
 8002982:	e0b2      	b.n	8002aea <UART_SetConfig+0x212>
 8002984:	2304      	movs	r3, #4
 8002986:	77fb      	strb	r3, [r7, #31]
 8002988:	e0af      	b.n	8002aea <UART_SetConfig+0x212>
 800298a:	2308      	movs	r3, #8
 800298c:	77fb      	strb	r3, [r7, #31]
 800298e:	e0ac      	b.n	8002aea <UART_SetConfig+0x212>
 8002990:	2310      	movs	r3, #16
 8002992:	77fb      	strb	r3, [r7, #31]
 8002994:	e0a9      	b.n	8002aea <UART_SetConfig+0x212>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a87      	ldr	r2, [pc, #540]	; (8002bb8 <UART_SetConfig+0x2e0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d124      	bne.n	80029ea <UART_SetConfig+0x112>
 80029a0:	4b84      	ldr	r3, [pc, #528]	; (8002bb4 <UART_SetConfig+0x2dc>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029ac:	d011      	beq.n	80029d2 <UART_SetConfig+0xfa>
 80029ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029b2:	d817      	bhi.n	80029e4 <UART_SetConfig+0x10c>
 80029b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029b8:	d011      	beq.n	80029de <UART_SetConfig+0x106>
 80029ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029be:	d811      	bhi.n	80029e4 <UART_SetConfig+0x10c>
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <UART_SetConfig+0xf4>
 80029c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c8:	d006      	beq.n	80029d8 <UART_SetConfig+0x100>
 80029ca:	e00b      	b.n	80029e4 <UART_SetConfig+0x10c>
 80029cc:	2300      	movs	r3, #0
 80029ce:	77fb      	strb	r3, [r7, #31]
 80029d0:	e08b      	b.n	8002aea <UART_SetConfig+0x212>
 80029d2:	2302      	movs	r3, #2
 80029d4:	77fb      	strb	r3, [r7, #31]
 80029d6:	e088      	b.n	8002aea <UART_SetConfig+0x212>
 80029d8:	2304      	movs	r3, #4
 80029da:	77fb      	strb	r3, [r7, #31]
 80029dc:	e085      	b.n	8002aea <UART_SetConfig+0x212>
 80029de:	2308      	movs	r3, #8
 80029e0:	77fb      	strb	r3, [r7, #31]
 80029e2:	e082      	b.n	8002aea <UART_SetConfig+0x212>
 80029e4:	2310      	movs	r3, #16
 80029e6:	77fb      	strb	r3, [r7, #31]
 80029e8:	e07f      	b.n	8002aea <UART_SetConfig+0x212>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a73      	ldr	r2, [pc, #460]	; (8002bbc <UART_SetConfig+0x2e4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d124      	bne.n	8002a3e <UART_SetConfig+0x166>
 80029f4:	4b6f      	ldr	r3, [pc, #444]	; (8002bb4 <UART_SetConfig+0x2dc>)
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80029fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a00:	d011      	beq.n	8002a26 <UART_SetConfig+0x14e>
 8002a02:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a06:	d817      	bhi.n	8002a38 <UART_SetConfig+0x160>
 8002a08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a0c:	d011      	beq.n	8002a32 <UART_SetConfig+0x15a>
 8002a0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a12:	d811      	bhi.n	8002a38 <UART_SetConfig+0x160>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <UART_SetConfig+0x148>
 8002a18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a1c:	d006      	beq.n	8002a2c <UART_SetConfig+0x154>
 8002a1e:	e00b      	b.n	8002a38 <UART_SetConfig+0x160>
 8002a20:	2300      	movs	r3, #0
 8002a22:	77fb      	strb	r3, [r7, #31]
 8002a24:	e061      	b.n	8002aea <UART_SetConfig+0x212>
 8002a26:	2302      	movs	r3, #2
 8002a28:	77fb      	strb	r3, [r7, #31]
 8002a2a:	e05e      	b.n	8002aea <UART_SetConfig+0x212>
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	77fb      	strb	r3, [r7, #31]
 8002a30:	e05b      	b.n	8002aea <UART_SetConfig+0x212>
 8002a32:	2308      	movs	r3, #8
 8002a34:	77fb      	strb	r3, [r7, #31]
 8002a36:	e058      	b.n	8002aea <UART_SetConfig+0x212>
 8002a38:	2310      	movs	r3, #16
 8002a3a:	77fb      	strb	r3, [r7, #31]
 8002a3c:	e055      	b.n	8002aea <UART_SetConfig+0x212>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a5f      	ldr	r2, [pc, #380]	; (8002bc0 <UART_SetConfig+0x2e8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d124      	bne.n	8002a92 <UART_SetConfig+0x1ba>
 8002a48:	4b5a      	ldr	r3, [pc, #360]	; (8002bb4 <UART_SetConfig+0x2dc>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a54:	d011      	beq.n	8002a7a <UART_SetConfig+0x1a2>
 8002a56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a5a:	d817      	bhi.n	8002a8c <UART_SetConfig+0x1b4>
 8002a5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a60:	d011      	beq.n	8002a86 <UART_SetConfig+0x1ae>
 8002a62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a66:	d811      	bhi.n	8002a8c <UART_SetConfig+0x1b4>
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <UART_SetConfig+0x19c>
 8002a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a70:	d006      	beq.n	8002a80 <UART_SetConfig+0x1a8>
 8002a72:	e00b      	b.n	8002a8c <UART_SetConfig+0x1b4>
 8002a74:	2300      	movs	r3, #0
 8002a76:	77fb      	strb	r3, [r7, #31]
 8002a78:	e037      	b.n	8002aea <UART_SetConfig+0x212>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	77fb      	strb	r3, [r7, #31]
 8002a7e:	e034      	b.n	8002aea <UART_SetConfig+0x212>
 8002a80:	2304      	movs	r3, #4
 8002a82:	77fb      	strb	r3, [r7, #31]
 8002a84:	e031      	b.n	8002aea <UART_SetConfig+0x212>
 8002a86:	2308      	movs	r3, #8
 8002a88:	77fb      	strb	r3, [r7, #31]
 8002a8a:	e02e      	b.n	8002aea <UART_SetConfig+0x212>
 8002a8c:	2310      	movs	r3, #16
 8002a8e:	77fb      	strb	r3, [r7, #31]
 8002a90:	e02b      	b.n	8002aea <UART_SetConfig+0x212>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a4b      	ldr	r2, [pc, #300]	; (8002bc4 <UART_SetConfig+0x2ec>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d124      	bne.n	8002ae6 <UART_SetConfig+0x20e>
 8002a9c:	4b45      	ldr	r3, [pc, #276]	; (8002bb4 <UART_SetConfig+0x2dc>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002aa4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002aa8:	d011      	beq.n	8002ace <UART_SetConfig+0x1f6>
 8002aaa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002aae:	d817      	bhi.n	8002ae0 <UART_SetConfig+0x208>
 8002ab0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ab4:	d011      	beq.n	8002ada <UART_SetConfig+0x202>
 8002ab6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002aba:	d811      	bhi.n	8002ae0 <UART_SetConfig+0x208>
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <UART_SetConfig+0x1f0>
 8002ac0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ac4:	d006      	beq.n	8002ad4 <UART_SetConfig+0x1fc>
 8002ac6:	e00b      	b.n	8002ae0 <UART_SetConfig+0x208>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	77fb      	strb	r3, [r7, #31]
 8002acc:	e00d      	b.n	8002aea <UART_SetConfig+0x212>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	77fb      	strb	r3, [r7, #31]
 8002ad2:	e00a      	b.n	8002aea <UART_SetConfig+0x212>
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	77fb      	strb	r3, [r7, #31]
 8002ad8:	e007      	b.n	8002aea <UART_SetConfig+0x212>
 8002ada:	2308      	movs	r3, #8
 8002adc:	77fb      	strb	r3, [r7, #31]
 8002ade:	e004      	b.n	8002aea <UART_SetConfig+0x212>
 8002ae0:	2310      	movs	r3, #16
 8002ae2:	77fb      	strb	r3, [r7, #31]
 8002ae4:	e001      	b.n	8002aea <UART_SetConfig+0x212>
 8002ae6:	2310      	movs	r3, #16
 8002ae8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002af2:	d16b      	bne.n	8002bcc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002af4:	7ffb      	ldrb	r3, [r7, #31]
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d827      	bhi.n	8002b4a <UART_SetConfig+0x272>
 8002afa:	a201      	add	r2, pc, #4	; (adr r2, 8002b00 <UART_SetConfig+0x228>)
 8002afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b00:	08002b25 	.word	0x08002b25
 8002b04:	08002b2d 	.word	0x08002b2d
 8002b08:	08002b35 	.word	0x08002b35
 8002b0c:	08002b4b 	.word	0x08002b4b
 8002b10:	08002b3b 	.word	0x08002b3b
 8002b14:	08002b4b 	.word	0x08002b4b
 8002b18:	08002b4b 	.word	0x08002b4b
 8002b1c:	08002b4b 	.word	0x08002b4b
 8002b20:	08002b43 	.word	0x08002b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b24:	f7ff fad4 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8002b28:	61b8      	str	r0, [r7, #24]
        break;
 8002b2a:	e013      	b.n	8002b54 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b2c:	f7ff faf2 	bl	8002114 <HAL_RCC_GetPCLK2Freq>
 8002b30:	61b8      	str	r0, [r7, #24]
        break;
 8002b32:	e00f      	b.n	8002b54 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b34:	4b24      	ldr	r3, [pc, #144]	; (8002bc8 <UART_SetConfig+0x2f0>)
 8002b36:	61bb      	str	r3, [r7, #24]
        break;
 8002b38:	e00c      	b.n	8002b54 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b3a:	f7ff fa53 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8002b3e:	61b8      	str	r0, [r7, #24]
        break;
 8002b40:	e008      	b.n	8002b54 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b46:	61bb      	str	r3, [r7, #24]
        break;
 8002b48:	e004      	b.n	8002b54 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	77bb      	strb	r3, [r7, #30]
        break;
 8002b52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 8084 	beq.w	8002c64 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	005a      	lsls	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	085b      	lsrs	r3, r3, #1
 8002b66:	441a      	add	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2b0f      	cmp	r3, #15
 8002b76:	d916      	bls.n	8002ba6 <UART_SetConfig+0x2ce>
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7e:	d212      	bcs.n	8002ba6 <UART_SetConfig+0x2ce>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	f023 030f 	bic.w	r3, r3, #15
 8002b88:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	085b      	lsrs	r3, r3, #1
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	89fb      	ldrh	r3, [r7, #14]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	89fa      	ldrh	r2, [r7, #14]
 8002ba2:	60da      	str	r2, [r3, #12]
 8002ba4:	e05e      	b.n	8002c64 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	77bb      	strb	r3, [r7, #30]
 8002baa:	e05b      	b.n	8002c64 <UART_SetConfig+0x38c>
 8002bac:	efff69f3 	.word	0xefff69f3
 8002bb0:	40013800 	.word	0x40013800
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40004400 	.word	0x40004400
 8002bbc:	40004800 	.word	0x40004800
 8002bc0:	40004c00 	.word	0x40004c00
 8002bc4:	40005000 	.word	0x40005000
 8002bc8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bcc:	7ffb      	ldrb	r3, [r7, #31]
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d827      	bhi.n	8002c22 <UART_SetConfig+0x34a>
 8002bd2:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <UART_SetConfig+0x300>)
 8002bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd8:	08002bfd 	.word	0x08002bfd
 8002bdc:	08002c05 	.word	0x08002c05
 8002be0:	08002c0d 	.word	0x08002c0d
 8002be4:	08002c23 	.word	0x08002c23
 8002be8:	08002c13 	.word	0x08002c13
 8002bec:	08002c23 	.word	0x08002c23
 8002bf0:	08002c23 	.word	0x08002c23
 8002bf4:	08002c23 	.word	0x08002c23
 8002bf8:	08002c1b 	.word	0x08002c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bfc:	f7ff fa68 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8002c00:	61b8      	str	r0, [r7, #24]
        break;
 8002c02:	e013      	b.n	8002c2c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c04:	f7ff fa86 	bl	8002114 <HAL_RCC_GetPCLK2Freq>
 8002c08:	61b8      	str	r0, [r7, #24]
        break;
 8002c0a:	e00f      	b.n	8002c2c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <UART_SetConfig+0x3a4>)
 8002c0e:	61bb      	str	r3, [r7, #24]
        break;
 8002c10:	e00c      	b.n	8002c2c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c12:	f7ff f9e7 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8002c16:	61b8      	str	r0, [r7, #24]
        break;
 8002c18:	e008      	b.n	8002c2c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c1e:	61bb      	str	r3, [r7, #24]
        break;
 8002c20:	e004      	b.n	8002c2c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	77bb      	strb	r3, [r7, #30]
        break;
 8002c2a:	bf00      	nop
    }

    if (pclk != 0U)
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d018      	beq.n	8002c64 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	085a      	lsrs	r2, r3, #1
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	441a      	add	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	2b0f      	cmp	r3, #15
 8002c4a:	d909      	bls.n	8002c60 <UART_SetConfig+0x388>
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c52:	d205      	bcs.n	8002c60 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	e001      	b.n	8002c64 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002c70:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3720      	adds	r7, #32
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	007a1200 	.word	0x007a1200

08002c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	f003 0310 	and.w	r3, r3, #16
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d01a      	beq.n	8002d96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d7e:	d10a      	bne.n	8002d96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	605a      	str	r2, [r3, #4]
  }
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b098      	sub	sp, #96	; 0x60
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002dd4:	f7fd fde0 	bl	8000998 <HAL_GetTick>
 8002dd8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d12e      	bne.n	8002e46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002de8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002df0:	2200      	movs	r2, #0
 8002df2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f88c 	bl	8002f14 <UART_WaitOnFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d021      	beq.n	8002e46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0a:	e853 3f00 	ldrex	r3, [r3]
 8002e0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e16:	653b      	str	r3, [r7, #80]	; 0x50
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e20:	647b      	str	r3, [r7, #68]	; 0x44
 8002e22:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e28:	e841 2300 	strex	r3, r2, [r1]
 8002e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1e6      	bne.n	8002e02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e062      	b.n	8002f0c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d149      	bne.n	8002ee8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f856 	bl	8002f14 <UART_WaitOnFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d03c      	beq.n	8002ee8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	e853 3f00 	ldrex	r3, [r3]
 8002e7a:	623b      	str	r3, [r7, #32]
   return(result);
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e8e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e94:	e841 2300 	strex	r3, r2, [r1]
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1e6      	bne.n	8002e6e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	3308      	adds	r3, #8
 8002ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	e853 3f00 	ldrex	r3, [r3]
 8002eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f023 0301 	bic.w	r3, r3, #1
 8002eb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3308      	adds	r3, #8
 8002ebe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ec0:	61fa      	str	r2, [r7, #28]
 8002ec2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec4:	69b9      	ldr	r1, [r7, #24]
 8002ec6:	69fa      	ldr	r2, [r7, #28]
 8002ec8:	e841 2300 	strex	r3, r2, [r1]
 8002ecc:	617b      	str	r3, [r7, #20]
   return(result);
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e5      	bne.n	8002ea0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e011      	b.n	8002f0c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3758      	adds	r7, #88	; 0x58
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f24:	e049      	b.n	8002fba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2c:	d045      	beq.n	8002fba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2e:	f7fd fd33 	bl	8000998 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d302      	bcc.n	8002f44 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e048      	b.n	8002fda <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d031      	beq.n	8002fba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d110      	bne.n	8002f86 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2208      	movs	r2, #8
 8002f6a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f838 	bl	8002fe2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2208      	movs	r2, #8
 8002f76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e029      	b.n	8002fda <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f94:	d111      	bne.n	8002fba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f81e 	bl	8002fe2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e00f      	b.n	8002fda <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69da      	ldr	r2, [r3, #28]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	bf0c      	ite	eq
 8002fca:	2301      	moveq	r3, #1
 8002fcc:	2300      	movne	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d0a6      	beq.n	8002f26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b095      	sub	sp, #84	; 0x54
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff2:	e853 3f00 	ldrex	r3, [r3]
 8002ff6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003008:	643b      	str	r3, [r7, #64]	; 0x40
 800300a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800300e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003010:	e841 2300 	strex	r3, r2, [r1]
 8003014:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1e6      	bne.n	8002fea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	3308      	adds	r3, #8
 8003022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	e853 3f00 	ldrex	r3, [r3]
 800302a:	61fb      	str	r3, [r7, #28]
   return(result);
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f023 0301 	bic.w	r3, r3, #1
 8003032:	64bb      	str	r3, [r7, #72]	; 0x48
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3308      	adds	r3, #8
 800303a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800303c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800303e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003044:	e841 2300 	strex	r3, r2, [r1]
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1e5      	bne.n	800301c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003054:	2b01      	cmp	r3, #1
 8003056:	d118      	bne.n	800308a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	e853 3f00 	ldrex	r3, [r3]
 8003064:	60bb      	str	r3, [r7, #8]
   return(result);
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f023 0310 	bic.w	r3, r3, #16
 800306c:	647b      	str	r3, [r7, #68]	; 0x44
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003076:	61bb      	str	r3, [r7, #24]
 8003078:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307a:	6979      	ldr	r1, [r7, #20]
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	e841 2300 	strex	r3, r2, [r1]
 8003082:	613b      	str	r3, [r7, #16]
   return(result);
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1e6      	bne.n	8003058 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2220      	movs	r2, #32
 800308e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800309e:	bf00      	nop
 80030a0:	3754      	adds	r7, #84	; 0x54
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
	...

080030ac <__errno>:
 80030ac:	4b01      	ldr	r3, [pc, #4]	; (80030b4 <__errno+0x8>)
 80030ae:	6818      	ldr	r0, [r3, #0]
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	2000000c 	.word	0x2000000c

080030b8 <__libc_init_array>:
 80030b8:	b570      	push	{r4, r5, r6, lr}
 80030ba:	4d0d      	ldr	r5, [pc, #52]	; (80030f0 <__libc_init_array+0x38>)
 80030bc:	4c0d      	ldr	r4, [pc, #52]	; (80030f4 <__libc_init_array+0x3c>)
 80030be:	1b64      	subs	r4, r4, r5
 80030c0:	10a4      	asrs	r4, r4, #2
 80030c2:	2600      	movs	r6, #0
 80030c4:	42a6      	cmp	r6, r4
 80030c6:	d109      	bne.n	80030dc <__libc_init_array+0x24>
 80030c8:	4d0b      	ldr	r5, [pc, #44]	; (80030f8 <__libc_init_array+0x40>)
 80030ca:	4c0c      	ldr	r4, [pc, #48]	; (80030fc <__libc_init_array+0x44>)
 80030cc:	f001 fa02 	bl	80044d4 <_init>
 80030d0:	1b64      	subs	r4, r4, r5
 80030d2:	10a4      	asrs	r4, r4, #2
 80030d4:	2600      	movs	r6, #0
 80030d6:	42a6      	cmp	r6, r4
 80030d8:	d105      	bne.n	80030e6 <__libc_init_array+0x2e>
 80030da:	bd70      	pop	{r4, r5, r6, pc}
 80030dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e0:	4798      	blx	r3
 80030e2:	3601      	adds	r6, #1
 80030e4:	e7ee      	b.n	80030c4 <__libc_init_array+0xc>
 80030e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ea:	4798      	blx	r3
 80030ec:	3601      	adds	r6, #1
 80030ee:	e7f2      	b.n	80030d6 <__libc_init_array+0x1e>
 80030f0:	0800467c 	.word	0x0800467c
 80030f4:	0800467c 	.word	0x0800467c
 80030f8:	0800467c 	.word	0x0800467c
 80030fc:	08004680 	.word	0x08004680

08003100 <memcmp>:
 8003100:	b530      	push	{r4, r5, lr}
 8003102:	3901      	subs	r1, #1
 8003104:	2400      	movs	r4, #0
 8003106:	42a2      	cmp	r2, r4
 8003108:	d101      	bne.n	800310e <memcmp+0xe>
 800310a:	2000      	movs	r0, #0
 800310c:	e005      	b.n	800311a <memcmp+0x1a>
 800310e:	5d03      	ldrb	r3, [r0, r4]
 8003110:	3401      	adds	r4, #1
 8003112:	5d0d      	ldrb	r5, [r1, r4]
 8003114:	42ab      	cmp	r3, r5
 8003116:	d0f6      	beq.n	8003106 <memcmp+0x6>
 8003118:	1b58      	subs	r0, r3, r5
 800311a:	bd30      	pop	{r4, r5, pc}

0800311c <memset>:
 800311c:	4402      	add	r2, r0
 800311e:	4603      	mov	r3, r0
 8003120:	4293      	cmp	r3, r2
 8003122:	d100      	bne.n	8003126 <memset+0xa>
 8003124:	4770      	bx	lr
 8003126:	f803 1b01 	strb.w	r1, [r3], #1
 800312a:	e7f9      	b.n	8003120 <memset+0x4>

0800312c <random>:
 800312c:	4b17      	ldr	r3, [pc, #92]	; (800318c <random+0x60>)
 800312e:	b510      	push	{r4, lr}
 8003130:	681c      	ldr	r4, [r3, #0]
 8003132:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003134:	b9b3      	cbnz	r3, 8003164 <random+0x38>
 8003136:	2018      	movs	r0, #24
 8003138:	f000 f888 	bl	800324c <malloc>
 800313c:	63a0      	str	r0, [r4, #56]	; 0x38
 800313e:	b928      	cbnz	r0, 800314c <random+0x20>
 8003140:	4602      	mov	r2, r0
 8003142:	4b13      	ldr	r3, [pc, #76]	; (8003190 <random+0x64>)
 8003144:	4813      	ldr	r0, [pc, #76]	; (8003194 <random+0x68>)
 8003146:	214c      	movs	r1, #76	; 0x4c
 8003148:	f000 f850 	bl	80031ec <__assert_func>
 800314c:	4a12      	ldr	r2, [pc, #72]	; (8003198 <random+0x6c>)
 800314e:	4b13      	ldr	r3, [pc, #76]	; (800319c <random+0x70>)
 8003150:	e9c0 2300 	strd	r2, r3, [r0]
 8003154:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <random+0x74>)
 8003156:	6083      	str	r3, [r0, #8]
 8003158:	230b      	movs	r3, #11
 800315a:	8183      	strh	r3, [r0, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	2300      	movs	r3, #0
 8003160:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003164:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003166:	480f      	ldr	r0, [pc, #60]	; (80031a4 <random+0x78>)
 8003168:	690a      	ldr	r2, [r1, #16]
 800316a:	694b      	ldr	r3, [r1, #20]
 800316c:	4c0e      	ldr	r4, [pc, #56]	; (80031a8 <random+0x7c>)
 800316e:	4350      	muls	r0, r2
 8003170:	fb04 0003 	mla	r0, r4, r3, r0
 8003174:	fba2 3404 	umull	r3, r4, r2, r4
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	4404      	add	r4, r0
 800317c:	f144 0000 	adc.w	r0, r4, #0
 8003180:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8003184:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003188:	bd10      	pop	{r4, pc}
 800318a:	bf00      	nop
 800318c:	2000000c 	.word	0x2000000c
 8003190:	08004534 	.word	0x08004534
 8003194:	0800454b 	.word	0x0800454b
 8003198:	abcd330e 	.word	0xabcd330e
 800319c:	e66d1234 	.word	0xe66d1234
 80031a0:	0005deec 	.word	0x0005deec
 80031a4:	5851f42d 	.word	0x5851f42d
 80031a8:	4c957f2d 	.word	0x4c957f2d

080031ac <siprintf>:
 80031ac:	b40e      	push	{r1, r2, r3}
 80031ae:	b500      	push	{lr}
 80031b0:	b09c      	sub	sp, #112	; 0x70
 80031b2:	ab1d      	add	r3, sp, #116	; 0x74
 80031b4:	9002      	str	r0, [sp, #8]
 80031b6:	9006      	str	r0, [sp, #24]
 80031b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031bc:	4809      	ldr	r0, [pc, #36]	; (80031e4 <siprintf+0x38>)
 80031be:	9107      	str	r1, [sp, #28]
 80031c0:	9104      	str	r1, [sp, #16]
 80031c2:	4909      	ldr	r1, [pc, #36]	; (80031e8 <siprintf+0x3c>)
 80031c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80031c8:	9105      	str	r1, [sp, #20]
 80031ca:	6800      	ldr	r0, [r0, #0]
 80031cc:	9301      	str	r3, [sp, #4]
 80031ce:	a902      	add	r1, sp, #8
 80031d0:	f000 f94a 	bl	8003468 <_svfiprintf_r>
 80031d4:	9b02      	ldr	r3, [sp, #8]
 80031d6:	2200      	movs	r2, #0
 80031d8:	701a      	strb	r2, [r3, #0]
 80031da:	b01c      	add	sp, #112	; 0x70
 80031dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80031e0:	b003      	add	sp, #12
 80031e2:	4770      	bx	lr
 80031e4:	2000000c 	.word	0x2000000c
 80031e8:	ffff0208 	.word	0xffff0208

080031ec <__assert_func>:
 80031ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80031ee:	4614      	mov	r4, r2
 80031f0:	461a      	mov	r2, r3
 80031f2:	4b09      	ldr	r3, [pc, #36]	; (8003218 <__assert_func+0x2c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4605      	mov	r5, r0
 80031f8:	68d8      	ldr	r0, [r3, #12]
 80031fa:	b14c      	cbz	r4, 8003210 <__assert_func+0x24>
 80031fc:	4b07      	ldr	r3, [pc, #28]	; (800321c <__assert_func+0x30>)
 80031fe:	9100      	str	r1, [sp, #0]
 8003200:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003204:	4906      	ldr	r1, [pc, #24]	; (8003220 <__assert_func+0x34>)
 8003206:	462b      	mov	r3, r5
 8003208:	f000 f80e 	bl	8003228 <fiprintf>
 800320c:	f000 fdea 	bl	8003de4 <abort>
 8003210:	4b04      	ldr	r3, [pc, #16]	; (8003224 <__assert_func+0x38>)
 8003212:	461c      	mov	r4, r3
 8003214:	e7f3      	b.n	80031fe <__assert_func+0x12>
 8003216:	bf00      	nop
 8003218:	2000000c 	.word	0x2000000c
 800321c:	080045ac 	.word	0x080045ac
 8003220:	080045b9 	.word	0x080045b9
 8003224:	080045e7 	.word	0x080045e7

08003228 <fiprintf>:
 8003228:	b40e      	push	{r1, r2, r3}
 800322a:	b503      	push	{r0, r1, lr}
 800322c:	4601      	mov	r1, r0
 800322e:	ab03      	add	r3, sp, #12
 8003230:	4805      	ldr	r0, [pc, #20]	; (8003248 <fiprintf+0x20>)
 8003232:	f853 2b04 	ldr.w	r2, [r3], #4
 8003236:	6800      	ldr	r0, [r0, #0]
 8003238:	9301      	str	r3, [sp, #4]
 800323a:	f000 fa3f 	bl	80036bc <_vfiprintf_r>
 800323e:	b002      	add	sp, #8
 8003240:	f85d eb04 	ldr.w	lr, [sp], #4
 8003244:	b003      	add	sp, #12
 8003246:	4770      	bx	lr
 8003248:	2000000c 	.word	0x2000000c

0800324c <malloc>:
 800324c:	4b02      	ldr	r3, [pc, #8]	; (8003258 <malloc+0xc>)
 800324e:	4601      	mov	r1, r0
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	f000 b853 	b.w	80032fc <_malloc_r>
 8003256:	bf00      	nop
 8003258:	2000000c 	.word	0x2000000c

0800325c <_free_r>:
 800325c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800325e:	2900      	cmp	r1, #0
 8003260:	d048      	beq.n	80032f4 <_free_r+0x98>
 8003262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003266:	9001      	str	r0, [sp, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	f1a1 0404 	sub.w	r4, r1, #4
 800326e:	bfb8      	it	lt
 8003270:	18e4      	addlt	r4, r4, r3
 8003272:	f001 f805 	bl	8004280 <__malloc_lock>
 8003276:	4a20      	ldr	r2, [pc, #128]	; (80032f8 <_free_r+0x9c>)
 8003278:	9801      	ldr	r0, [sp, #4]
 800327a:	6813      	ldr	r3, [r2, #0]
 800327c:	4615      	mov	r5, r2
 800327e:	b933      	cbnz	r3, 800328e <_free_r+0x32>
 8003280:	6063      	str	r3, [r4, #4]
 8003282:	6014      	str	r4, [r2, #0]
 8003284:	b003      	add	sp, #12
 8003286:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800328a:	f000 bfff 	b.w	800428c <__malloc_unlock>
 800328e:	42a3      	cmp	r3, r4
 8003290:	d90b      	bls.n	80032aa <_free_r+0x4e>
 8003292:	6821      	ldr	r1, [r4, #0]
 8003294:	1862      	adds	r2, r4, r1
 8003296:	4293      	cmp	r3, r2
 8003298:	bf04      	itt	eq
 800329a:	681a      	ldreq	r2, [r3, #0]
 800329c:	685b      	ldreq	r3, [r3, #4]
 800329e:	6063      	str	r3, [r4, #4]
 80032a0:	bf04      	itt	eq
 80032a2:	1852      	addeq	r2, r2, r1
 80032a4:	6022      	streq	r2, [r4, #0]
 80032a6:	602c      	str	r4, [r5, #0]
 80032a8:	e7ec      	b.n	8003284 <_free_r+0x28>
 80032aa:	461a      	mov	r2, r3
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	b10b      	cbz	r3, 80032b4 <_free_r+0x58>
 80032b0:	42a3      	cmp	r3, r4
 80032b2:	d9fa      	bls.n	80032aa <_free_r+0x4e>
 80032b4:	6811      	ldr	r1, [r2, #0]
 80032b6:	1855      	adds	r5, r2, r1
 80032b8:	42a5      	cmp	r5, r4
 80032ba:	d10b      	bne.n	80032d4 <_free_r+0x78>
 80032bc:	6824      	ldr	r4, [r4, #0]
 80032be:	4421      	add	r1, r4
 80032c0:	1854      	adds	r4, r2, r1
 80032c2:	42a3      	cmp	r3, r4
 80032c4:	6011      	str	r1, [r2, #0]
 80032c6:	d1dd      	bne.n	8003284 <_free_r+0x28>
 80032c8:	681c      	ldr	r4, [r3, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	6053      	str	r3, [r2, #4]
 80032ce:	4421      	add	r1, r4
 80032d0:	6011      	str	r1, [r2, #0]
 80032d2:	e7d7      	b.n	8003284 <_free_r+0x28>
 80032d4:	d902      	bls.n	80032dc <_free_r+0x80>
 80032d6:	230c      	movs	r3, #12
 80032d8:	6003      	str	r3, [r0, #0]
 80032da:	e7d3      	b.n	8003284 <_free_r+0x28>
 80032dc:	6825      	ldr	r5, [r4, #0]
 80032de:	1961      	adds	r1, r4, r5
 80032e0:	428b      	cmp	r3, r1
 80032e2:	bf04      	itt	eq
 80032e4:	6819      	ldreq	r1, [r3, #0]
 80032e6:	685b      	ldreq	r3, [r3, #4]
 80032e8:	6063      	str	r3, [r4, #4]
 80032ea:	bf04      	itt	eq
 80032ec:	1949      	addeq	r1, r1, r5
 80032ee:	6021      	streq	r1, [r4, #0]
 80032f0:	6054      	str	r4, [r2, #4]
 80032f2:	e7c7      	b.n	8003284 <_free_r+0x28>
 80032f4:	b003      	add	sp, #12
 80032f6:	bd30      	pop	{r4, r5, pc}
 80032f8:	20000094 	.word	0x20000094

080032fc <_malloc_r>:
 80032fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fe:	1ccd      	adds	r5, r1, #3
 8003300:	f025 0503 	bic.w	r5, r5, #3
 8003304:	3508      	adds	r5, #8
 8003306:	2d0c      	cmp	r5, #12
 8003308:	bf38      	it	cc
 800330a:	250c      	movcc	r5, #12
 800330c:	2d00      	cmp	r5, #0
 800330e:	4606      	mov	r6, r0
 8003310:	db01      	blt.n	8003316 <_malloc_r+0x1a>
 8003312:	42a9      	cmp	r1, r5
 8003314:	d903      	bls.n	800331e <_malloc_r+0x22>
 8003316:	230c      	movs	r3, #12
 8003318:	6033      	str	r3, [r6, #0]
 800331a:	2000      	movs	r0, #0
 800331c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800331e:	f000 ffaf 	bl	8004280 <__malloc_lock>
 8003322:	4921      	ldr	r1, [pc, #132]	; (80033a8 <_malloc_r+0xac>)
 8003324:	680a      	ldr	r2, [r1, #0]
 8003326:	4614      	mov	r4, r2
 8003328:	b99c      	cbnz	r4, 8003352 <_malloc_r+0x56>
 800332a:	4f20      	ldr	r7, [pc, #128]	; (80033ac <_malloc_r+0xb0>)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	b923      	cbnz	r3, 800333a <_malloc_r+0x3e>
 8003330:	4621      	mov	r1, r4
 8003332:	4630      	mov	r0, r6
 8003334:	f000 fc86 	bl	8003c44 <_sbrk_r>
 8003338:	6038      	str	r0, [r7, #0]
 800333a:	4629      	mov	r1, r5
 800333c:	4630      	mov	r0, r6
 800333e:	f000 fc81 	bl	8003c44 <_sbrk_r>
 8003342:	1c43      	adds	r3, r0, #1
 8003344:	d123      	bne.n	800338e <_malloc_r+0x92>
 8003346:	230c      	movs	r3, #12
 8003348:	6033      	str	r3, [r6, #0]
 800334a:	4630      	mov	r0, r6
 800334c:	f000 ff9e 	bl	800428c <__malloc_unlock>
 8003350:	e7e3      	b.n	800331a <_malloc_r+0x1e>
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	1b5b      	subs	r3, r3, r5
 8003356:	d417      	bmi.n	8003388 <_malloc_r+0x8c>
 8003358:	2b0b      	cmp	r3, #11
 800335a:	d903      	bls.n	8003364 <_malloc_r+0x68>
 800335c:	6023      	str	r3, [r4, #0]
 800335e:	441c      	add	r4, r3
 8003360:	6025      	str	r5, [r4, #0]
 8003362:	e004      	b.n	800336e <_malloc_r+0x72>
 8003364:	6863      	ldr	r3, [r4, #4]
 8003366:	42a2      	cmp	r2, r4
 8003368:	bf0c      	ite	eq
 800336a:	600b      	streq	r3, [r1, #0]
 800336c:	6053      	strne	r3, [r2, #4]
 800336e:	4630      	mov	r0, r6
 8003370:	f000 ff8c 	bl	800428c <__malloc_unlock>
 8003374:	f104 000b 	add.w	r0, r4, #11
 8003378:	1d23      	adds	r3, r4, #4
 800337a:	f020 0007 	bic.w	r0, r0, #7
 800337e:	1ac2      	subs	r2, r0, r3
 8003380:	d0cc      	beq.n	800331c <_malloc_r+0x20>
 8003382:	1a1b      	subs	r3, r3, r0
 8003384:	50a3      	str	r3, [r4, r2]
 8003386:	e7c9      	b.n	800331c <_malloc_r+0x20>
 8003388:	4622      	mov	r2, r4
 800338a:	6864      	ldr	r4, [r4, #4]
 800338c:	e7cc      	b.n	8003328 <_malloc_r+0x2c>
 800338e:	1cc4      	adds	r4, r0, #3
 8003390:	f024 0403 	bic.w	r4, r4, #3
 8003394:	42a0      	cmp	r0, r4
 8003396:	d0e3      	beq.n	8003360 <_malloc_r+0x64>
 8003398:	1a21      	subs	r1, r4, r0
 800339a:	4630      	mov	r0, r6
 800339c:	f000 fc52 	bl	8003c44 <_sbrk_r>
 80033a0:	3001      	adds	r0, #1
 80033a2:	d1dd      	bne.n	8003360 <_malloc_r+0x64>
 80033a4:	e7cf      	b.n	8003346 <_malloc_r+0x4a>
 80033a6:	bf00      	nop
 80033a8:	20000094 	.word	0x20000094
 80033ac:	20000098 	.word	0x20000098

080033b0 <__ssputs_r>:
 80033b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033b4:	688e      	ldr	r6, [r1, #8]
 80033b6:	429e      	cmp	r6, r3
 80033b8:	4682      	mov	sl, r0
 80033ba:	460c      	mov	r4, r1
 80033bc:	4690      	mov	r8, r2
 80033be:	461f      	mov	r7, r3
 80033c0:	d838      	bhi.n	8003434 <__ssputs_r+0x84>
 80033c2:	898a      	ldrh	r2, [r1, #12]
 80033c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033c8:	d032      	beq.n	8003430 <__ssputs_r+0x80>
 80033ca:	6825      	ldr	r5, [r4, #0]
 80033cc:	6909      	ldr	r1, [r1, #16]
 80033ce:	eba5 0901 	sub.w	r9, r5, r1
 80033d2:	6965      	ldr	r5, [r4, #20]
 80033d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033dc:	3301      	adds	r3, #1
 80033de:	444b      	add	r3, r9
 80033e0:	106d      	asrs	r5, r5, #1
 80033e2:	429d      	cmp	r5, r3
 80033e4:	bf38      	it	cc
 80033e6:	461d      	movcc	r5, r3
 80033e8:	0553      	lsls	r3, r2, #21
 80033ea:	d531      	bpl.n	8003450 <__ssputs_r+0xa0>
 80033ec:	4629      	mov	r1, r5
 80033ee:	f7ff ff85 	bl	80032fc <_malloc_r>
 80033f2:	4606      	mov	r6, r0
 80033f4:	b950      	cbnz	r0, 800340c <__ssputs_r+0x5c>
 80033f6:	230c      	movs	r3, #12
 80033f8:	f8ca 3000 	str.w	r3, [sl]
 80033fc:	89a3      	ldrh	r3, [r4, #12]
 80033fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003402:	81a3      	strh	r3, [r4, #12]
 8003404:	f04f 30ff 	mov.w	r0, #4294967295
 8003408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800340c:	6921      	ldr	r1, [r4, #16]
 800340e:	464a      	mov	r2, r9
 8003410:	f000 ff0e 	bl	8004230 <memcpy>
 8003414:	89a3      	ldrh	r3, [r4, #12]
 8003416:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800341a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800341e:	81a3      	strh	r3, [r4, #12]
 8003420:	6126      	str	r6, [r4, #16]
 8003422:	6165      	str	r5, [r4, #20]
 8003424:	444e      	add	r6, r9
 8003426:	eba5 0509 	sub.w	r5, r5, r9
 800342a:	6026      	str	r6, [r4, #0]
 800342c:	60a5      	str	r5, [r4, #8]
 800342e:	463e      	mov	r6, r7
 8003430:	42be      	cmp	r6, r7
 8003432:	d900      	bls.n	8003436 <__ssputs_r+0x86>
 8003434:	463e      	mov	r6, r7
 8003436:	4632      	mov	r2, r6
 8003438:	6820      	ldr	r0, [r4, #0]
 800343a:	4641      	mov	r1, r8
 800343c:	f000 ff06 	bl	800424c <memmove>
 8003440:	68a3      	ldr	r3, [r4, #8]
 8003442:	6822      	ldr	r2, [r4, #0]
 8003444:	1b9b      	subs	r3, r3, r6
 8003446:	4432      	add	r2, r6
 8003448:	60a3      	str	r3, [r4, #8]
 800344a:	6022      	str	r2, [r4, #0]
 800344c:	2000      	movs	r0, #0
 800344e:	e7db      	b.n	8003408 <__ssputs_r+0x58>
 8003450:	462a      	mov	r2, r5
 8003452:	f000 ff21 	bl	8004298 <_realloc_r>
 8003456:	4606      	mov	r6, r0
 8003458:	2800      	cmp	r0, #0
 800345a:	d1e1      	bne.n	8003420 <__ssputs_r+0x70>
 800345c:	6921      	ldr	r1, [r4, #16]
 800345e:	4650      	mov	r0, sl
 8003460:	f7ff fefc 	bl	800325c <_free_r>
 8003464:	e7c7      	b.n	80033f6 <__ssputs_r+0x46>
	...

08003468 <_svfiprintf_r>:
 8003468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800346c:	4698      	mov	r8, r3
 800346e:	898b      	ldrh	r3, [r1, #12]
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	b09d      	sub	sp, #116	; 0x74
 8003474:	4607      	mov	r7, r0
 8003476:	460d      	mov	r5, r1
 8003478:	4614      	mov	r4, r2
 800347a:	d50e      	bpl.n	800349a <_svfiprintf_r+0x32>
 800347c:	690b      	ldr	r3, [r1, #16]
 800347e:	b963      	cbnz	r3, 800349a <_svfiprintf_r+0x32>
 8003480:	2140      	movs	r1, #64	; 0x40
 8003482:	f7ff ff3b 	bl	80032fc <_malloc_r>
 8003486:	6028      	str	r0, [r5, #0]
 8003488:	6128      	str	r0, [r5, #16]
 800348a:	b920      	cbnz	r0, 8003496 <_svfiprintf_r+0x2e>
 800348c:	230c      	movs	r3, #12
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	f04f 30ff 	mov.w	r0, #4294967295
 8003494:	e0d1      	b.n	800363a <_svfiprintf_r+0x1d2>
 8003496:	2340      	movs	r3, #64	; 0x40
 8003498:	616b      	str	r3, [r5, #20]
 800349a:	2300      	movs	r3, #0
 800349c:	9309      	str	r3, [sp, #36]	; 0x24
 800349e:	2320      	movs	r3, #32
 80034a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80034a8:	2330      	movs	r3, #48	; 0x30
 80034aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003654 <_svfiprintf_r+0x1ec>
 80034ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034b2:	f04f 0901 	mov.w	r9, #1
 80034b6:	4623      	mov	r3, r4
 80034b8:	469a      	mov	sl, r3
 80034ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034be:	b10a      	cbz	r2, 80034c4 <_svfiprintf_r+0x5c>
 80034c0:	2a25      	cmp	r2, #37	; 0x25
 80034c2:	d1f9      	bne.n	80034b8 <_svfiprintf_r+0x50>
 80034c4:	ebba 0b04 	subs.w	fp, sl, r4
 80034c8:	d00b      	beq.n	80034e2 <_svfiprintf_r+0x7a>
 80034ca:	465b      	mov	r3, fp
 80034cc:	4622      	mov	r2, r4
 80034ce:	4629      	mov	r1, r5
 80034d0:	4638      	mov	r0, r7
 80034d2:	f7ff ff6d 	bl	80033b0 <__ssputs_r>
 80034d6:	3001      	adds	r0, #1
 80034d8:	f000 80aa 	beq.w	8003630 <_svfiprintf_r+0x1c8>
 80034dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034de:	445a      	add	r2, fp
 80034e0:	9209      	str	r2, [sp, #36]	; 0x24
 80034e2:	f89a 3000 	ldrb.w	r3, [sl]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 80a2 	beq.w	8003630 <_svfiprintf_r+0x1c8>
 80034ec:	2300      	movs	r3, #0
 80034ee:	f04f 32ff 	mov.w	r2, #4294967295
 80034f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034f6:	f10a 0a01 	add.w	sl, sl, #1
 80034fa:	9304      	str	r3, [sp, #16]
 80034fc:	9307      	str	r3, [sp, #28]
 80034fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003502:	931a      	str	r3, [sp, #104]	; 0x68
 8003504:	4654      	mov	r4, sl
 8003506:	2205      	movs	r2, #5
 8003508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800350c:	4851      	ldr	r0, [pc, #324]	; (8003654 <_svfiprintf_r+0x1ec>)
 800350e:	f7fc fe6f 	bl	80001f0 <memchr>
 8003512:	9a04      	ldr	r2, [sp, #16]
 8003514:	b9d8      	cbnz	r0, 800354e <_svfiprintf_r+0xe6>
 8003516:	06d0      	lsls	r0, r2, #27
 8003518:	bf44      	itt	mi
 800351a:	2320      	movmi	r3, #32
 800351c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003520:	0711      	lsls	r1, r2, #28
 8003522:	bf44      	itt	mi
 8003524:	232b      	movmi	r3, #43	; 0x2b
 8003526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800352a:	f89a 3000 	ldrb.w	r3, [sl]
 800352e:	2b2a      	cmp	r3, #42	; 0x2a
 8003530:	d015      	beq.n	800355e <_svfiprintf_r+0xf6>
 8003532:	9a07      	ldr	r2, [sp, #28]
 8003534:	4654      	mov	r4, sl
 8003536:	2000      	movs	r0, #0
 8003538:	f04f 0c0a 	mov.w	ip, #10
 800353c:	4621      	mov	r1, r4
 800353e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003542:	3b30      	subs	r3, #48	; 0x30
 8003544:	2b09      	cmp	r3, #9
 8003546:	d94e      	bls.n	80035e6 <_svfiprintf_r+0x17e>
 8003548:	b1b0      	cbz	r0, 8003578 <_svfiprintf_r+0x110>
 800354a:	9207      	str	r2, [sp, #28]
 800354c:	e014      	b.n	8003578 <_svfiprintf_r+0x110>
 800354e:	eba0 0308 	sub.w	r3, r0, r8
 8003552:	fa09 f303 	lsl.w	r3, r9, r3
 8003556:	4313      	orrs	r3, r2
 8003558:	9304      	str	r3, [sp, #16]
 800355a:	46a2      	mov	sl, r4
 800355c:	e7d2      	b.n	8003504 <_svfiprintf_r+0x9c>
 800355e:	9b03      	ldr	r3, [sp, #12]
 8003560:	1d19      	adds	r1, r3, #4
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	9103      	str	r1, [sp, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	bfbb      	ittet	lt
 800356a:	425b      	neglt	r3, r3
 800356c:	f042 0202 	orrlt.w	r2, r2, #2
 8003570:	9307      	strge	r3, [sp, #28]
 8003572:	9307      	strlt	r3, [sp, #28]
 8003574:	bfb8      	it	lt
 8003576:	9204      	strlt	r2, [sp, #16]
 8003578:	7823      	ldrb	r3, [r4, #0]
 800357a:	2b2e      	cmp	r3, #46	; 0x2e
 800357c:	d10c      	bne.n	8003598 <_svfiprintf_r+0x130>
 800357e:	7863      	ldrb	r3, [r4, #1]
 8003580:	2b2a      	cmp	r3, #42	; 0x2a
 8003582:	d135      	bne.n	80035f0 <_svfiprintf_r+0x188>
 8003584:	9b03      	ldr	r3, [sp, #12]
 8003586:	1d1a      	adds	r2, r3, #4
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	9203      	str	r2, [sp, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	bfb8      	it	lt
 8003590:	f04f 33ff 	movlt.w	r3, #4294967295
 8003594:	3402      	adds	r4, #2
 8003596:	9305      	str	r3, [sp, #20]
 8003598:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003664 <_svfiprintf_r+0x1fc>
 800359c:	7821      	ldrb	r1, [r4, #0]
 800359e:	2203      	movs	r2, #3
 80035a0:	4650      	mov	r0, sl
 80035a2:	f7fc fe25 	bl	80001f0 <memchr>
 80035a6:	b140      	cbz	r0, 80035ba <_svfiprintf_r+0x152>
 80035a8:	2340      	movs	r3, #64	; 0x40
 80035aa:	eba0 000a 	sub.w	r0, r0, sl
 80035ae:	fa03 f000 	lsl.w	r0, r3, r0
 80035b2:	9b04      	ldr	r3, [sp, #16]
 80035b4:	4303      	orrs	r3, r0
 80035b6:	3401      	adds	r4, #1
 80035b8:	9304      	str	r3, [sp, #16]
 80035ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035be:	4826      	ldr	r0, [pc, #152]	; (8003658 <_svfiprintf_r+0x1f0>)
 80035c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035c4:	2206      	movs	r2, #6
 80035c6:	f7fc fe13 	bl	80001f0 <memchr>
 80035ca:	2800      	cmp	r0, #0
 80035cc:	d038      	beq.n	8003640 <_svfiprintf_r+0x1d8>
 80035ce:	4b23      	ldr	r3, [pc, #140]	; (800365c <_svfiprintf_r+0x1f4>)
 80035d0:	bb1b      	cbnz	r3, 800361a <_svfiprintf_r+0x1b2>
 80035d2:	9b03      	ldr	r3, [sp, #12]
 80035d4:	3307      	adds	r3, #7
 80035d6:	f023 0307 	bic.w	r3, r3, #7
 80035da:	3308      	adds	r3, #8
 80035dc:	9303      	str	r3, [sp, #12]
 80035de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035e0:	4433      	add	r3, r6
 80035e2:	9309      	str	r3, [sp, #36]	; 0x24
 80035e4:	e767      	b.n	80034b6 <_svfiprintf_r+0x4e>
 80035e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80035ea:	460c      	mov	r4, r1
 80035ec:	2001      	movs	r0, #1
 80035ee:	e7a5      	b.n	800353c <_svfiprintf_r+0xd4>
 80035f0:	2300      	movs	r3, #0
 80035f2:	3401      	adds	r4, #1
 80035f4:	9305      	str	r3, [sp, #20]
 80035f6:	4619      	mov	r1, r3
 80035f8:	f04f 0c0a 	mov.w	ip, #10
 80035fc:	4620      	mov	r0, r4
 80035fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003602:	3a30      	subs	r2, #48	; 0x30
 8003604:	2a09      	cmp	r2, #9
 8003606:	d903      	bls.n	8003610 <_svfiprintf_r+0x1a8>
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0c5      	beq.n	8003598 <_svfiprintf_r+0x130>
 800360c:	9105      	str	r1, [sp, #20]
 800360e:	e7c3      	b.n	8003598 <_svfiprintf_r+0x130>
 8003610:	fb0c 2101 	mla	r1, ip, r1, r2
 8003614:	4604      	mov	r4, r0
 8003616:	2301      	movs	r3, #1
 8003618:	e7f0      	b.n	80035fc <_svfiprintf_r+0x194>
 800361a:	ab03      	add	r3, sp, #12
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	462a      	mov	r2, r5
 8003620:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <_svfiprintf_r+0x1f8>)
 8003622:	a904      	add	r1, sp, #16
 8003624:	4638      	mov	r0, r7
 8003626:	f3af 8000 	nop.w
 800362a:	1c42      	adds	r2, r0, #1
 800362c:	4606      	mov	r6, r0
 800362e:	d1d6      	bne.n	80035de <_svfiprintf_r+0x176>
 8003630:	89ab      	ldrh	r3, [r5, #12]
 8003632:	065b      	lsls	r3, r3, #25
 8003634:	f53f af2c 	bmi.w	8003490 <_svfiprintf_r+0x28>
 8003638:	9809      	ldr	r0, [sp, #36]	; 0x24
 800363a:	b01d      	add	sp, #116	; 0x74
 800363c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003640:	ab03      	add	r3, sp, #12
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	462a      	mov	r2, r5
 8003646:	4b06      	ldr	r3, [pc, #24]	; (8003660 <_svfiprintf_r+0x1f8>)
 8003648:	a904      	add	r1, sp, #16
 800364a:	4638      	mov	r0, r7
 800364c:	f000 f9d4 	bl	80039f8 <_printf_i>
 8003650:	e7eb      	b.n	800362a <_svfiprintf_r+0x1c2>
 8003652:	bf00      	nop
 8003654:	080045e8 	.word	0x080045e8
 8003658:	080045f2 	.word	0x080045f2
 800365c:	00000000 	.word	0x00000000
 8003660:	080033b1 	.word	0x080033b1
 8003664:	080045ee 	.word	0x080045ee

08003668 <__sfputc_r>:
 8003668:	6893      	ldr	r3, [r2, #8]
 800366a:	3b01      	subs	r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	b410      	push	{r4}
 8003670:	6093      	str	r3, [r2, #8]
 8003672:	da08      	bge.n	8003686 <__sfputc_r+0x1e>
 8003674:	6994      	ldr	r4, [r2, #24]
 8003676:	42a3      	cmp	r3, r4
 8003678:	db01      	blt.n	800367e <__sfputc_r+0x16>
 800367a:	290a      	cmp	r1, #10
 800367c:	d103      	bne.n	8003686 <__sfputc_r+0x1e>
 800367e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003682:	f000 baef 	b.w	8003c64 <__swbuf_r>
 8003686:	6813      	ldr	r3, [r2, #0]
 8003688:	1c58      	adds	r0, r3, #1
 800368a:	6010      	str	r0, [r2, #0]
 800368c:	7019      	strb	r1, [r3, #0]
 800368e:	4608      	mov	r0, r1
 8003690:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003694:	4770      	bx	lr

08003696 <__sfputs_r>:
 8003696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003698:	4606      	mov	r6, r0
 800369a:	460f      	mov	r7, r1
 800369c:	4614      	mov	r4, r2
 800369e:	18d5      	adds	r5, r2, r3
 80036a0:	42ac      	cmp	r4, r5
 80036a2:	d101      	bne.n	80036a8 <__sfputs_r+0x12>
 80036a4:	2000      	movs	r0, #0
 80036a6:	e007      	b.n	80036b8 <__sfputs_r+0x22>
 80036a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ac:	463a      	mov	r2, r7
 80036ae:	4630      	mov	r0, r6
 80036b0:	f7ff ffda 	bl	8003668 <__sfputc_r>
 80036b4:	1c43      	adds	r3, r0, #1
 80036b6:	d1f3      	bne.n	80036a0 <__sfputs_r+0xa>
 80036b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036bc <_vfiprintf_r>:
 80036bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036c0:	460d      	mov	r5, r1
 80036c2:	b09d      	sub	sp, #116	; 0x74
 80036c4:	4614      	mov	r4, r2
 80036c6:	4698      	mov	r8, r3
 80036c8:	4606      	mov	r6, r0
 80036ca:	b118      	cbz	r0, 80036d4 <_vfiprintf_r+0x18>
 80036cc:	6983      	ldr	r3, [r0, #24]
 80036ce:	b90b      	cbnz	r3, 80036d4 <_vfiprintf_r+0x18>
 80036d0:	f000 fcaa 	bl	8004028 <__sinit>
 80036d4:	4b89      	ldr	r3, [pc, #548]	; (80038fc <_vfiprintf_r+0x240>)
 80036d6:	429d      	cmp	r5, r3
 80036d8:	d11b      	bne.n	8003712 <_vfiprintf_r+0x56>
 80036da:	6875      	ldr	r5, [r6, #4]
 80036dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036de:	07d9      	lsls	r1, r3, #31
 80036e0:	d405      	bmi.n	80036ee <_vfiprintf_r+0x32>
 80036e2:	89ab      	ldrh	r3, [r5, #12]
 80036e4:	059a      	lsls	r2, r3, #22
 80036e6:	d402      	bmi.n	80036ee <_vfiprintf_r+0x32>
 80036e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036ea:	f000 fd3b 	bl	8004164 <__retarget_lock_acquire_recursive>
 80036ee:	89ab      	ldrh	r3, [r5, #12]
 80036f0:	071b      	lsls	r3, r3, #28
 80036f2:	d501      	bpl.n	80036f8 <_vfiprintf_r+0x3c>
 80036f4:	692b      	ldr	r3, [r5, #16]
 80036f6:	b9eb      	cbnz	r3, 8003734 <_vfiprintf_r+0x78>
 80036f8:	4629      	mov	r1, r5
 80036fa:	4630      	mov	r0, r6
 80036fc:	f000 fb04 	bl	8003d08 <__swsetup_r>
 8003700:	b1c0      	cbz	r0, 8003734 <_vfiprintf_r+0x78>
 8003702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003704:	07dc      	lsls	r4, r3, #31
 8003706:	d50e      	bpl.n	8003726 <_vfiprintf_r+0x6a>
 8003708:	f04f 30ff 	mov.w	r0, #4294967295
 800370c:	b01d      	add	sp, #116	; 0x74
 800370e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003712:	4b7b      	ldr	r3, [pc, #492]	; (8003900 <_vfiprintf_r+0x244>)
 8003714:	429d      	cmp	r5, r3
 8003716:	d101      	bne.n	800371c <_vfiprintf_r+0x60>
 8003718:	68b5      	ldr	r5, [r6, #8]
 800371a:	e7df      	b.n	80036dc <_vfiprintf_r+0x20>
 800371c:	4b79      	ldr	r3, [pc, #484]	; (8003904 <_vfiprintf_r+0x248>)
 800371e:	429d      	cmp	r5, r3
 8003720:	bf08      	it	eq
 8003722:	68f5      	ldreq	r5, [r6, #12]
 8003724:	e7da      	b.n	80036dc <_vfiprintf_r+0x20>
 8003726:	89ab      	ldrh	r3, [r5, #12]
 8003728:	0598      	lsls	r0, r3, #22
 800372a:	d4ed      	bmi.n	8003708 <_vfiprintf_r+0x4c>
 800372c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800372e:	f000 fd1a 	bl	8004166 <__retarget_lock_release_recursive>
 8003732:	e7e9      	b.n	8003708 <_vfiprintf_r+0x4c>
 8003734:	2300      	movs	r3, #0
 8003736:	9309      	str	r3, [sp, #36]	; 0x24
 8003738:	2320      	movs	r3, #32
 800373a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800373e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003742:	2330      	movs	r3, #48	; 0x30
 8003744:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003908 <_vfiprintf_r+0x24c>
 8003748:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800374c:	f04f 0901 	mov.w	r9, #1
 8003750:	4623      	mov	r3, r4
 8003752:	469a      	mov	sl, r3
 8003754:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003758:	b10a      	cbz	r2, 800375e <_vfiprintf_r+0xa2>
 800375a:	2a25      	cmp	r2, #37	; 0x25
 800375c:	d1f9      	bne.n	8003752 <_vfiprintf_r+0x96>
 800375e:	ebba 0b04 	subs.w	fp, sl, r4
 8003762:	d00b      	beq.n	800377c <_vfiprintf_r+0xc0>
 8003764:	465b      	mov	r3, fp
 8003766:	4622      	mov	r2, r4
 8003768:	4629      	mov	r1, r5
 800376a:	4630      	mov	r0, r6
 800376c:	f7ff ff93 	bl	8003696 <__sfputs_r>
 8003770:	3001      	adds	r0, #1
 8003772:	f000 80aa 	beq.w	80038ca <_vfiprintf_r+0x20e>
 8003776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003778:	445a      	add	r2, fp
 800377a:	9209      	str	r2, [sp, #36]	; 0x24
 800377c:	f89a 3000 	ldrb.w	r3, [sl]
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80a2 	beq.w	80038ca <_vfiprintf_r+0x20e>
 8003786:	2300      	movs	r3, #0
 8003788:	f04f 32ff 	mov.w	r2, #4294967295
 800378c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003790:	f10a 0a01 	add.w	sl, sl, #1
 8003794:	9304      	str	r3, [sp, #16]
 8003796:	9307      	str	r3, [sp, #28]
 8003798:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800379c:	931a      	str	r3, [sp, #104]	; 0x68
 800379e:	4654      	mov	r4, sl
 80037a0:	2205      	movs	r2, #5
 80037a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037a6:	4858      	ldr	r0, [pc, #352]	; (8003908 <_vfiprintf_r+0x24c>)
 80037a8:	f7fc fd22 	bl	80001f0 <memchr>
 80037ac:	9a04      	ldr	r2, [sp, #16]
 80037ae:	b9d8      	cbnz	r0, 80037e8 <_vfiprintf_r+0x12c>
 80037b0:	06d1      	lsls	r1, r2, #27
 80037b2:	bf44      	itt	mi
 80037b4:	2320      	movmi	r3, #32
 80037b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037ba:	0713      	lsls	r3, r2, #28
 80037bc:	bf44      	itt	mi
 80037be:	232b      	movmi	r3, #43	; 0x2b
 80037c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037c4:	f89a 3000 	ldrb.w	r3, [sl]
 80037c8:	2b2a      	cmp	r3, #42	; 0x2a
 80037ca:	d015      	beq.n	80037f8 <_vfiprintf_r+0x13c>
 80037cc:	9a07      	ldr	r2, [sp, #28]
 80037ce:	4654      	mov	r4, sl
 80037d0:	2000      	movs	r0, #0
 80037d2:	f04f 0c0a 	mov.w	ip, #10
 80037d6:	4621      	mov	r1, r4
 80037d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037dc:	3b30      	subs	r3, #48	; 0x30
 80037de:	2b09      	cmp	r3, #9
 80037e0:	d94e      	bls.n	8003880 <_vfiprintf_r+0x1c4>
 80037e2:	b1b0      	cbz	r0, 8003812 <_vfiprintf_r+0x156>
 80037e4:	9207      	str	r2, [sp, #28]
 80037e6:	e014      	b.n	8003812 <_vfiprintf_r+0x156>
 80037e8:	eba0 0308 	sub.w	r3, r0, r8
 80037ec:	fa09 f303 	lsl.w	r3, r9, r3
 80037f0:	4313      	orrs	r3, r2
 80037f2:	9304      	str	r3, [sp, #16]
 80037f4:	46a2      	mov	sl, r4
 80037f6:	e7d2      	b.n	800379e <_vfiprintf_r+0xe2>
 80037f8:	9b03      	ldr	r3, [sp, #12]
 80037fa:	1d19      	adds	r1, r3, #4
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	9103      	str	r1, [sp, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	bfbb      	ittet	lt
 8003804:	425b      	neglt	r3, r3
 8003806:	f042 0202 	orrlt.w	r2, r2, #2
 800380a:	9307      	strge	r3, [sp, #28]
 800380c:	9307      	strlt	r3, [sp, #28]
 800380e:	bfb8      	it	lt
 8003810:	9204      	strlt	r2, [sp, #16]
 8003812:	7823      	ldrb	r3, [r4, #0]
 8003814:	2b2e      	cmp	r3, #46	; 0x2e
 8003816:	d10c      	bne.n	8003832 <_vfiprintf_r+0x176>
 8003818:	7863      	ldrb	r3, [r4, #1]
 800381a:	2b2a      	cmp	r3, #42	; 0x2a
 800381c:	d135      	bne.n	800388a <_vfiprintf_r+0x1ce>
 800381e:	9b03      	ldr	r3, [sp, #12]
 8003820:	1d1a      	adds	r2, r3, #4
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	9203      	str	r2, [sp, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	bfb8      	it	lt
 800382a:	f04f 33ff 	movlt.w	r3, #4294967295
 800382e:	3402      	adds	r4, #2
 8003830:	9305      	str	r3, [sp, #20]
 8003832:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003918 <_vfiprintf_r+0x25c>
 8003836:	7821      	ldrb	r1, [r4, #0]
 8003838:	2203      	movs	r2, #3
 800383a:	4650      	mov	r0, sl
 800383c:	f7fc fcd8 	bl	80001f0 <memchr>
 8003840:	b140      	cbz	r0, 8003854 <_vfiprintf_r+0x198>
 8003842:	2340      	movs	r3, #64	; 0x40
 8003844:	eba0 000a 	sub.w	r0, r0, sl
 8003848:	fa03 f000 	lsl.w	r0, r3, r0
 800384c:	9b04      	ldr	r3, [sp, #16]
 800384e:	4303      	orrs	r3, r0
 8003850:	3401      	adds	r4, #1
 8003852:	9304      	str	r3, [sp, #16]
 8003854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003858:	482c      	ldr	r0, [pc, #176]	; (800390c <_vfiprintf_r+0x250>)
 800385a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800385e:	2206      	movs	r2, #6
 8003860:	f7fc fcc6 	bl	80001f0 <memchr>
 8003864:	2800      	cmp	r0, #0
 8003866:	d03f      	beq.n	80038e8 <_vfiprintf_r+0x22c>
 8003868:	4b29      	ldr	r3, [pc, #164]	; (8003910 <_vfiprintf_r+0x254>)
 800386a:	bb1b      	cbnz	r3, 80038b4 <_vfiprintf_r+0x1f8>
 800386c:	9b03      	ldr	r3, [sp, #12]
 800386e:	3307      	adds	r3, #7
 8003870:	f023 0307 	bic.w	r3, r3, #7
 8003874:	3308      	adds	r3, #8
 8003876:	9303      	str	r3, [sp, #12]
 8003878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800387a:	443b      	add	r3, r7
 800387c:	9309      	str	r3, [sp, #36]	; 0x24
 800387e:	e767      	b.n	8003750 <_vfiprintf_r+0x94>
 8003880:	fb0c 3202 	mla	r2, ip, r2, r3
 8003884:	460c      	mov	r4, r1
 8003886:	2001      	movs	r0, #1
 8003888:	e7a5      	b.n	80037d6 <_vfiprintf_r+0x11a>
 800388a:	2300      	movs	r3, #0
 800388c:	3401      	adds	r4, #1
 800388e:	9305      	str	r3, [sp, #20]
 8003890:	4619      	mov	r1, r3
 8003892:	f04f 0c0a 	mov.w	ip, #10
 8003896:	4620      	mov	r0, r4
 8003898:	f810 2b01 	ldrb.w	r2, [r0], #1
 800389c:	3a30      	subs	r2, #48	; 0x30
 800389e:	2a09      	cmp	r2, #9
 80038a0:	d903      	bls.n	80038aa <_vfiprintf_r+0x1ee>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0c5      	beq.n	8003832 <_vfiprintf_r+0x176>
 80038a6:	9105      	str	r1, [sp, #20]
 80038a8:	e7c3      	b.n	8003832 <_vfiprintf_r+0x176>
 80038aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80038ae:	4604      	mov	r4, r0
 80038b0:	2301      	movs	r3, #1
 80038b2:	e7f0      	b.n	8003896 <_vfiprintf_r+0x1da>
 80038b4:	ab03      	add	r3, sp, #12
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	462a      	mov	r2, r5
 80038ba:	4b16      	ldr	r3, [pc, #88]	; (8003914 <_vfiprintf_r+0x258>)
 80038bc:	a904      	add	r1, sp, #16
 80038be:	4630      	mov	r0, r6
 80038c0:	f3af 8000 	nop.w
 80038c4:	4607      	mov	r7, r0
 80038c6:	1c78      	adds	r0, r7, #1
 80038c8:	d1d6      	bne.n	8003878 <_vfiprintf_r+0x1bc>
 80038ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038cc:	07d9      	lsls	r1, r3, #31
 80038ce:	d405      	bmi.n	80038dc <_vfiprintf_r+0x220>
 80038d0:	89ab      	ldrh	r3, [r5, #12]
 80038d2:	059a      	lsls	r2, r3, #22
 80038d4:	d402      	bmi.n	80038dc <_vfiprintf_r+0x220>
 80038d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038d8:	f000 fc45 	bl	8004166 <__retarget_lock_release_recursive>
 80038dc:	89ab      	ldrh	r3, [r5, #12]
 80038de:	065b      	lsls	r3, r3, #25
 80038e0:	f53f af12 	bmi.w	8003708 <_vfiprintf_r+0x4c>
 80038e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038e6:	e711      	b.n	800370c <_vfiprintf_r+0x50>
 80038e8:	ab03      	add	r3, sp, #12
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	462a      	mov	r2, r5
 80038ee:	4b09      	ldr	r3, [pc, #36]	; (8003914 <_vfiprintf_r+0x258>)
 80038f0:	a904      	add	r1, sp, #16
 80038f2:	4630      	mov	r0, r6
 80038f4:	f000 f880 	bl	80039f8 <_printf_i>
 80038f8:	e7e4      	b.n	80038c4 <_vfiprintf_r+0x208>
 80038fa:	bf00      	nop
 80038fc:	0800463c 	.word	0x0800463c
 8003900:	0800465c 	.word	0x0800465c
 8003904:	0800461c 	.word	0x0800461c
 8003908:	080045e8 	.word	0x080045e8
 800390c:	080045f2 	.word	0x080045f2
 8003910:	00000000 	.word	0x00000000
 8003914:	08003697 	.word	0x08003697
 8003918:	080045ee 	.word	0x080045ee

0800391c <_printf_common>:
 800391c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003920:	4616      	mov	r6, r2
 8003922:	4699      	mov	r9, r3
 8003924:	688a      	ldr	r2, [r1, #8]
 8003926:	690b      	ldr	r3, [r1, #16]
 8003928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800392c:	4293      	cmp	r3, r2
 800392e:	bfb8      	it	lt
 8003930:	4613      	movlt	r3, r2
 8003932:	6033      	str	r3, [r6, #0]
 8003934:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003938:	4607      	mov	r7, r0
 800393a:	460c      	mov	r4, r1
 800393c:	b10a      	cbz	r2, 8003942 <_printf_common+0x26>
 800393e:	3301      	adds	r3, #1
 8003940:	6033      	str	r3, [r6, #0]
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	0699      	lsls	r1, r3, #26
 8003946:	bf42      	ittt	mi
 8003948:	6833      	ldrmi	r3, [r6, #0]
 800394a:	3302      	addmi	r3, #2
 800394c:	6033      	strmi	r3, [r6, #0]
 800394e:	6825      	ldr	r5, [r4, #0]
 8003950:	f015 0506 	ands.w	r5, r5, #6
 8003954:	d106      	bne.n	8003964 <_printf_common+0x48>
 8003956:	f104 0a19 	add.w	sl, r4, #25
 800395a:	68e3      	ldr	r3, [r4, #12]
 800395c:	6832      	ldr	r2, [r6, #0]
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	42ab      	cmp	r3, r5
 8003962:	dc26      	bgt.n	80039b2 <_printf_common+0x96>
 8003964:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003968:	1e13      	subs	r3, r2, #0
 800396a:	6822      	ldr	r2, [r4, #0]
 800396c:	bf18      	it	ne
 800396e:	2301      	movne	r3, #1
 8003970:	0692      	lsls	r2, r2, #26
 8003972:	d42b      	bmi.n	80039cc <_printf_common+0xb0>
 8003974:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003978:	4649      	mov	r1, r9
 800397a:	4638      	mov	r0, r7
 800397c:	47c0      	blx	r8
 800397e:	3001      	adds	r0, #1
 8003980:	d01e      	beq.n	80039c0 <_printf_common+0xa4>
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	68e5      	ldr	r5, [r4, #12]
 8003986:	6832      	ldr	r2, [r6, #0]
 8003988:	f003 0306 	and.w	r3, r3, #6
 800398c:	2b04      	cmp	r3, #4
 800398e:	bf08      	it	eq
 8003990:	1aad      	subeq	r5, r5, r2
 8003992:	68a3      	ldr	r3, [r4, #8]
 8003994:	6922      	ldr	r2, [r4, #16]
 8003996:	bf0c      	ite	eq
 8003998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800399c:	2500      	movne	r5, #0
 800399e:	4293      	cmp	r3, r2
 80039a0:	bfc4      	itt	gt
 80039a2:	1a9b      	subgt	r3, r3, r2
 80039a4:	18ed      	addgt	r5, r5, r3
 80039a6:	2600      	movs	r6, #0
 80039a8:	341a      	adds	r4, #26
 80039aa:	42b5      	cmp	r5, r6
 80039ac:	d11a      	bne.n	80039e4 <_printf_common+0xc8>
 80039ae:	2000      	movs	r0, #0
 80039b0:	e008      	b.n	80039c4 <_printf_common+0xa8>
 80039b2:	2301      	movs	r3, #1
 80039b4:	4652      	mov	r2, sl
 80039b6:	4649      	mov	r1, r9
 80039b8:	4638      	mov	r0, r7
 80039ba:	47c0      	blx	r8
 80039bc:	3001      	adds	r0, #1
 80039be:	d103      	bne.n	80039c8 <_printf_common+0xac>
 80039c0:	f04f 30ff 	mov.w	r0, #4294967295
 80039c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039c8:	3501      	adds	r5, #1
 80039ca:	e7c6      	b.n	800395a <_printf_common+0x3e>
 80039cc:	18e1      	adds	r1, r4, r3
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	2030      	movs	r0, #48	; 0x30
 80039d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039d6:	4422      	add	r2, r4
 80039d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039e0:	3302      	adds	r3, #2
 80039e2:	e7c7      	b.n	8003974 <_printf_common+0x58>
 80039e4:	2301      	movs	r3, #1
 80039e6:	4622      	mov	r2, r4
 80039e8:	4649      	mov	r1, r9
 80039ea:	4638      	mov	r0, r7
 80039ec:	47c0      	blx	r8
 80039ee:	3001      	adds	r0, #1
 80039f0:	d0e6      	beq.n	80039c0 <_printf_common+0xa4>
 80039f2:	3601      	adds	r6, #1
 80039f4:	e7d9      	b.n	80039aa <_printf_common+0x8e>
	...

080039f8 <_printf_i>:
 80039f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039fc:	460c      	mov	r4, r1
 80039fe:	4691      	mov	r9, r2
 8003a00:	7e27      	ldrb	r7, [r4, #24]
 8003a02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a04:	2f78      	cmp	r7, #120	; 0x78
 8003a06:	4680      	mov	r8, r0
 8003a08:	469a      	mov	sl, r3
 8003a0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a0e:	d807      	bhi.n	8003a20 <_printf_i+0x28>
 8003a10:	2f62      	cmp	r7, #98	; 0x62
 8003a12:	d80a      	bhi.n	8003a2a <_printf_i+0x32>
 8003a14:	2f00      	cmp	r7, #0
 8003a16:	f000 80d8 	beq.w	8003bca <_printf_i+0x1d2>
 8003a1a:	2f58      	cmp	r7, #88	; 0x58
 8003a1c:	f000 80a3 	beq.w	8003b66 <_printf_i+0x16e>
 8003a20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a28:	e03a      	b.n	8003aa0 <_printf_i+0xa8>
 8003a2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a2e:	2b15      	cmp	r3, #21
 8003a30:	d8f6      	bhi.n	8003a20 <_printf_i+0x28>
 8003a32:	a001      	add	r0, pc, #4	; (adr r0, 8003a38 <_printf_i+0x40>)
 8003a34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003a38:	08003a91 	.word	0x08003a91
 8003a3c:	08003aa5 	.word	0x08003aa5
 8003a40:	08003a21 	.word	0x08003a21
 8003a44:	08003a21 	.word	0x08003a21
 8003a48:	08003a21 	.word	0x08003a21
 8003a4c:	08003a21 	.word	0x08003a21
 8003a50:	08003aa5 	.word	0x08003aa5
 8003a54:	08003a21 	.word	0x08003a21
 8003a58:	08003a21 	.word	0x08003a21
 8003a5c:	08003a21 	.word	0x08003a21
 8003a60:	08003a21 	.word	0x08003a21
 8003a64:	08003bb1 	.word	0x08003bb1
 8003a68:	08003ad5 	.word	0x08003ad5
 8003a6c:	08003b93 	.word	0x08003b93
 8003a70:	08003a21 	.word	0x08003a21
 8003a74:	08003a21 	.word	0x08003a21
 8003a78:	08003bd3 	.word	0x08003bd3
 8003a7c:	08003a21 	.word	0x08003a21
 8003a80:	08003ad5 	.word	0x08003ad5
 8003a84:	08003a21 	.word	0x08003a21
 8003a88:	08003a21 	.word	0x08003a21
 8003a8c:	08003b9b 	.word	0x08003b9b
 8003a90:	680b      	ldr	r3, [r1, #0]
 8003a92:	1d1a      	adds	r2, r3, #4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	600a      	str	r2, [r1, #0]
 8003a98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0a3      	b.n	8003bec <_printf_i+0x1f4>
 8003aa4:	6825      	ldr	r5, [r4, #0]
 8003aa6:	6808      	ldr	r0, [r1, #0]
 8003aa8:	062e      	lsls	r6, r5, #24
 8003aaa:	f100 0304 	add.w	r3, r0, #4
 8003aae:	d50a      	bpl.n	8003ac6 <_printf_i+0xce>
 8003ab0:	6805      	ldr	r5, [r0, #0]
 8003ab2:	600b      	str	r3, [r1, #0]
 8003ab4:	2d00      	cmp	r5, #0
 8003ab6:	da03      	bge.n	8003ac0 <_printf_i+0xc8>
 8003ab8:	232d      	movs	r3, #45	; 0x2d
 8003aba:	426d      	negs	r5, r5
 8003abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ac0:	485e      	ldr	r0, [pc, #376]	; (8003c3c <_printf_i+0x244>)
 8003ac2:	230a      	movs	r3, #10
 8003ac4:	e019      	b.n	8003afa <_printf_i+0x102>
 8003ac6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003aca:	6805      	ldr	r5, [r0, #0]
 8003acc:	600b      	str	r3, [r1, #0]
 8003ace:	bf18      	it	ne
 8003ad0:	b22d      	sxthne	r5, r5
 8003ad2:	e7ef      	b.n	8003ab4 <_printf_i+0xbc>
 8003ad4:	680b      	ldr	r3, [r1, #0]
 8003ad6:	6825      	ldr	r5, [r4, #0]
 8003ad8:	1d18      	adds	r0, r3, #4
 8003ada:	6008      	str	r0, [r1, #0]
 8003adc:	0628      	lsls	r0, r5, #24
 8003ade:	d501      	bpl.n	8003ae4 <_printf_i+0xec>
 8003ae0:	681d      	ldr	r5, [r3, #0]
 8003ae2:	e002      	b.n	8003aea <_printf_i+0xf2>
 8003ae4:	0669      	lsls	r1, r5, #25
 8003ae6:	d5fb      	bpl.n	8003ae0 <_printf_i+0xe8>
 8003ae8:	881d      	ldrh	r5, [r3, #0]
 8003aea:	4854      	ldr	r0, [pc, #336]	; (8003c3c <_printf_i+0x244>)
 8003aec:	2f6f      	cmp	r7, #111	; 0x6f
 8003aee:	bf0c      	ite	eq
 8003af0:	2308      	moveq	r3, #8
 8003af2:	230a      	movne	r3, #10
 8003af4:	2100      	movs	r1, #0
 8003af6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003afa:	6866      	ldr	r6, [r4, #4]
 8003afc:	60a6      	str	r6, [r4, #8]
 8003afe:	2e00      	cmp	r6, #0
 8003b00:	bfa2      	ittt	ge
 8003b02:	6821      	ldrge	r1, [r4, #0]
 8003b04:	f021 0104 	bicge.w	r1, r1, #4
 8003b08:	6021      	strge	r1, [r4, #0]
 8003b0a:	b90d      	cbnz	r5, 8003b10 <_printf_i+0x118>
 8003b0c:	2e00      	cmp	r6, #0
 8003b0e:	d04d      	beq.n	8003bac <_printf_i+0x1b4>
 8003b10:	4616      	mov	r6, r2
 8003b12:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b16:	fb03 5711 	mls	r7, r3, r1, r5
 8003b1a:	5dc7      	ldrb	r7, [r0, r7]
 8003b1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b20:	462f      	mov	r7, r5
 8003b22:	42bb      	cmp	r3, r7
 8003b24:	460d      	mov	r5, r1
 8003b26:	d9f4      	bls.n	8003b12 <_printf_i+0x11a>
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d10b      	bne.n	8003b44 <_printf_i+0x14c>
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	07df      	lsls	r7, r3, #31
 8003b30:	d508      	bpl.n	8003b44 <_printf_i+0x14c>
 8003b32:	6923      	ldr	r3, [r4, #16]
 8003b34:	6861      	ldr	r1, [r4, #4]
 8003b36:	4299      	cmp	r1, r3
 8003b38:	bfde      	ittt	le
 8003b3a:	2330      	movle	r3, #48	; 0x30
 8003b3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b44:	1b92      	subs	r2, r2, r6
 8003b46:	6122      	str	r2, [r4, #16]
 8003b48:	f8cd a000 	str.w	sl, [sp]
 8003b4c:	464b      	mov	r3, r9
 8003b4e:	aa03      	add	r2, sp, #12
 8003b50:	4621      	mov	r1, r4
 8003b52:	4640      	mov	r0, r8
 8003b54:	f7ff fee2 	bl	800391c <_printf_common>
 8003b58:	3001      	adds	r0, #1
 8003b5a:	d14c      	bne.n	8003bf6 <_printf_i+0x1fe>
 8003b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b60:	b004      	add	sp, #16
 8003b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b66:	4835      	ldr	r0, [pc, #212]	; (8003c3c <_printf_i+0x244>)
 8003b68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	680e      	ldr	r6, [r1, #0]
 8003b70:	061f      	lsls	r7, r3, #24
 8003b72:	f856 5b04 	ldr.w	r5, [r6], #4
 8003b76:	600e      	str	r6, [r1, #0]
 8003b78:	d514      	bpl.n	8003ba4 <_printf_i+0x1ac>
 8003b7a:	07d9      	lsls	r1, r3, #31
 8003b7c:	bf44      	itt	mi
 8003b7e:	f043 0320 	orrmi.w	r3, r3, #32
 8003b82:	6023      	strmi	r3, [r4, #0]
 8003b84:	b91d      	cbnz	r5, 8003b8e <_printf_i+0x196>
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	f023 0320 	bic.w	r3, r3, #32
 8003b8c:	6023      	str	r3, [r4, #0]
 8003b8e:	2310      	movs	r3, #16
 8003b90:	e7b0      	b.n	8003af4 <_printf_i+0xfc>
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	f043 0320 	orr.w	r3, r3, #32
 8003b98:	6023      	str	r3, [r4, #0]
 8003b9a:	2378      	movs	r3, #120	; 0x78
 8003b9c:	4828      	ldr	r0, [pc, #160]	; (8003c40 <_printf_i+0x248>)
 8003b9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ba2:	e7e3      	b.n	8003b6c <_printf_i+0x174>
 8003ba4:	065e      	lsls	r6, r3, #25
 8003ba6:	bf48      	it	mi
 8003ba8:	b2ad      	uxthmi	r5, r5
 8003baa:	e7e6      	b.n	8003b7a <_printf_i+0x182>
 8003bac:	4616      	mov	r6, r2
 8003bae:	e7bb      	b.n	8003b28 <_printf_i+0x130>
 8003bb0:	680b      	ldr	r3, [r1, #0]
 8003bb2:	6826      	ldr	r6, [r4, #0]
 8003bb4:	6960      	ldr	r0, [r4, #20]
 8003bb6:	1d1d      	adds	r5, r3, #4
 8003bb8:	600d      	str	r5, [r1, #0]
 8003bba:	0635      	lsls	r5, r6, #24
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	d501      	bpl.n	8003bc4 <_printf_i+0x1cc>
 8003bc0:	6018      	str	r0, [r3, #0]
 8003bc2:	e002      	b.n	8003bca <_printf_i+0x1d2>
 8003bc4:	0671      	lsls	r1, r6, #25
 8003bc6:	d5fb      	bpl.n	8003bc0 <_printf_i+0x1c8>
 8003bc8:	8018      	strh	r0, [r3, #0]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	6123      	str	r3, [r4, #16]
 8003bce:	4616      	mov	r6, r2
 8003bd0:	e7ba      	b.n	8003b48 <_printf_i+0x150>
 8003bd2:	680b      	ldr	r3, [r1, #0]
 8003bd4:	1d1a      	adds	r2, r3, #4
 8003bd6:	600a      	str	r2, [r1, #0]
 8003bd8:	681e      	ldr	r6, [r3, #0]
 8003bda:	6862      	ldr	r2, [r4, #4]
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4630      	mov	r0, r6
 8003be0:	f7fc fb06 	bl	80001f0 <memchr>
 8003be4:	b108      	cbz	r0, 8003bea <_printf_i+0x1f2>
 8003be6:	1b80      	subs	r0, r0, r6
 8003be8:	6060      	str	r0, [r4, #4]
 8003bea:	6863      	ldr	r3, [r4, #4]
 8003bec:	6123      	str	r3, [r4, #16]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bf4:	e7a8      	b.n	8003b48 <_printf_i+0x150>
 8003bf6:	6923      	ldr	r3, [r4, #16]
 8003bf8:	4632      	mov	r2, r6
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	4640      	mov	r0, r8
 8003bfe:	47d0      	blx	sl
 8003c00:	3001      	adds	r0, #1
 8003c02:	d0ab      	beq.n	8003b5c <_printf_i+0x164>
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	079b      	lsls	r3, r3, #30
 8003c08:	d413      	bmi.n	8003c32 <_printf_i+0x23a>
 8003c0a:	68e0      	ldr	r0, [r4, #12]
 8003c0c:	9b03      	ldr	r3, [sp, #12]
 8003c0e:	4298      	cmp	r0, r3
 8003c10:	bfb8      	it	lt
 8003c12:	4618      	movlt	r0, r3
 8003c14:	e7a4      	b.n	8003b60 <_printf_i+0x168>
 8003c16:	2301      	movs	r3, #1
 8003c18:	4632      	mov	r2, r6
 8003c1a:	4649      	mov	r1, r9
 8003c1c:	4640      	mov	r0, r8
 8003c1e:	47d0      	blx	sl
 8003c20:	3001      	adds	r0, #1
 8003c22:	d09b      	beq.n	8003b5c <_printf_i+0x164>
 8003c24:	3501      	adds	r5, #1
 8003c26:	68e3      	ldr	r3, [r4, #12]
 8003c28:	9903      	ldr	r1, [sp, #12]
 8003c2a:	1a5b      	subs	r3, r3, r1
 8003c2c:	42ab      	cmp	r3, r5
 8003c2e:	dcf2      	bgt.n	8003c16 <_printf_i+0x21e>
 8003c30:	e7eb      	b.n	8003c0a <_printf_i+0x212>
 8003c32:	2500      	movs	r5, #0
 8003c34:	f104 0619 	add.w	r6, r4, #25
 8003c38:	e7f5      	b.n	8003c26 <_printf_i+0x22e>
 8003c3a:	bf00      	nop
 8003c3c:	080045f9 	.word	0x080045f9
 8003c40:	0800460a 	.word	0x0800460a

08003c44 <_sbrk_r>:
 8003c44:	b538      	push	{r3, r4, r5, lr}
 8003c46:	4d06      	ldr	r5, [pc, #24]	; (8003c60 <_sbrk_r+0x1c>)
 8003c48:	2300      	movs	r3, #0
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	4608      	mov	r0, r1
 8003c4e:	602b      	str	r3, [r5, #0]
 8003c50:	f7fc fdd6 	bl	8000800 <_sbrk>
 8003c54:	1c43      	adds	r3, r0, #1
 8003c56:	d102      	bne.n	8003c5e <_sbrk_r+0x1a>
 8003c58:	682b      	ldr	r3, [r5, #0]
 8003c5a:	b103      	cbz	r3, 8003c5e <_sbrk_r+0x1a>
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	bd38      	pop	{r3, r4, r5, pc}
 8003c60:	20000134 	.word	0x20000134

08003c64 <__swbuf_r>:
 8003c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c66:	460e      	mov	r6, r1
 8003c68:	4614      	mov	r4, r2
 8003c6a:	4605      	mov	r5, r0
 8003c6c:	b118      	cbz	r0, 8003c76 <__swbuf_r+0x12>
 8003c6e:	6983      	ldr	r3, [r0, #24]
 8003c70:	b90b      	cbnz	r3, 8003c76 <__swbuf_r+0x12>
 8003c72:	f000 f9d9 	bl	8004028 <__sinit>
 8003c76:	4b21      	ldr	r3, [pc, #132]	; (8003cfc <__swbuf_r+0x98>)
 8003c78:	429c      	cmp	r4, r3
 8003c7a:	d12b      	bne.n	8003cd4 <__swbuf_r+0x70>
 8003c7c:	686c      	ldr	r4, [r5, #4]
 8003c7e:	69a3      	ldr	r3, [r4, #24]
 8003c80:	60a3      	str	r3, [r4, #8]
 8003c82:	89a3      	ldrh	r3, [r4, #12]
 8003c84:	071a      	lsls	r2, r3, #28
 8003c86:	d52f      	bpl.n	8003ce8 <__swbuf_r+0x84>
 8003c88:	6923      	ldr	r3, [r4, #16]
 8003c8a:	b36b      	cbz	r3, 8003ce8 <__swbuf_r+0x84>
 8003c8c:	6923      	ldr	r3, [r4, #16]
 8003c8e:	6820      	ldr	r0, [r4, #0]
 8003c90:	1ac0      	subs	r0, r0, r3
 8003c92:	6963      	ldr	r3, [r4, #20]
 8003c94:	b2f6      	uxtb	r6, r6
 8003c96:	4283      	cmp	r3, r0
 8003c98:	4637      	mov	r7, r6
 8003c9a:	dc04      	bgt.n	8003ca6 <__swbuf_r+0x42>
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	4628      	mov	r0, r5
 8003ca0:	f000 f92e 	bl	8003f00 <_fflush_r>
 8003ca4:	bb30      	cbnz	r0, 8003cf4 <__swbuf_r+0x90>
 8003ca6:	68a3      	ldr	r3, [r4, #8]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	60a3      	str	r3, [r4, #8]
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	6022      	str	r2, [r4, #0]
 8003cb2:	701e      	strb	r6, [r3, #0]
 8003cb4:	6963      	ldr	r3, [r4, #20]
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	4283      	cmp	r3, r0
 8003cba:	d004      	beq.n	8003cc6 <__swbuf_r+0x62>
 8003cbc:	89a3      	ldrh	r3, [r4, #12]
 8003cbe:	07db      	lsls	r3, r3, #31
 8003cc0:	d506      	bpl.n	8003cd0 <__swbuf_r+0x6c>
 8003cc2:	2e0a      	cmp	r6, #10
 8003cc4:	d104      	bne.n	8003cd0 <__swbuf_r+0x6c>
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	4628      	mov	r0, r5
 8003cca:	f000 f919 	bl	8003f00 <_fflush_r>
 8003cce:	b988      	cbnz	r0, 8003cf4 <__swbuf_r+0x90>
 8003cd0:	4638      	mov	r0, r7
 8003cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cd4:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <__swbuf_r+0x9c>)
 8003cd6:	429c      	cmp	r4, r3
 8003cd8:	d101      	bne.n	8003cde <__swbuf_r+0x7a>
 8003cda:	68ac      	ldr	r4, [r5, #8]
 8003cdc:	e7cf      	b.n	8003c7e <__swbuf_r+0x1a>
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <__swbuf_r+0xa0>)
 8003ce0:	429c      	cmp	r4, r3
 8003ce2:	bf08      	it	eq
 8003ce4:	68ec      	ldreq	r4, [r5, #12]
 8003ce6:	e7ca      	b.n	8003c7e <__swbuf_r+0x1a>
 8003ce8:	4621      	mov	r1, r4
 8003cea:	4628      	mov	r0, r5
 8003cec:	f000 f80c 	bl	8003d08 <__swsetup_r>
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	d0cb      	beq.n	8003c8c <__swbuf_r+0x28>
 8003cf4:	f04f 37ff 	mov.w	r7, #4294967295
 8003cf8:	e7ea      	b.n	8003cd0 <__swbuf_r+0x6c>
 8003cfa:	bf00      	nop
 8003cfc:	0800463c 	.word	0x0800463c
 8003d00:	0800465c 	.word	0x0800465c
 8003d04:	0800461c 	.word	0x0800461c

08003d08 <__swsetup_r>:
 8003d08:	4b32      	ldr	r3, [pc, #200]	; (8003dd4 <__swsetup_r+0xcc>)
 8003d0a:	b570      	push	{r4, r5, r6, lr}
 8003d0c:	681d      	ldr	r5, [r3, #0]
 8003d0e:	4606      	mov	r6, r0
 8003d10:	460c      	mov	r4, r1
 8003d12:	b125      	cbz	r5, 8003d1e <__swsetup_r+0x16>
 8003d14:	69ab      	ldr	r3, [r5, #24]
 8003d16:	b913      	cbnz	r3, 8003d1e <__swsetup_r+0x16>
 8003d18:	4628      	mov	r0, r5
 8003d1a:	f000 f985 	bl	8004028 <__sinit>
 8003d1e:	4b2e      	ldr	r3, [pc, #184]	; (8003dd8 <__swsetup_r+0xd0>)
 8003d20:	429c      	cmp	r4, r3
 8003d22:	d10f      	bne.n	8003d44 <__swsetup_r+0x3c>
 8003d24:	686c      	ldr	r4, [r5, #4]
 8003d26:	89a3      	ldrh	r3, [r4, #12]
 8003d28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d2c:	0719      	lsls	r1, r3, #28
 8003d2e:	d42c      	bmi.n	8003d8a <__swsetup_r+0x82>
 8003d30:	06dd      	lsls	r5, r3, #27
 8003d32:	d411      	bmi.n	8003d58 <__swsetup_r+0x50>
 8003d34:	2309      	movs	r3, #9
 8003d36:	6033      	str	r3, [r6, #0]
 8003d38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d3c:	81a3      	strh	r3, [r4, #12]
 8003d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d42:	e03e      	b.n	8003dc2 <__swsetup_r+0xba>
 8003d44:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <__swsetup_r+0xd4>)
 8003d46:	429c      	cmp	r4, r3
 8003d48:	d101      	bne.n	8003d4e <__swsetup_r+0x46>
 8003d4a:	68ac      	ldr	r4, [r5, #8]
 8003d4c:	e7eb      	b.n	8003d26 <__swsetup_r+0x1e>
 8003d4e:	4b24      	ldr	r3, [pc, #144]	; (8003de0 <__swsetup_r+0xd8>)
 8003d50:	429c      	cmp	r4, r3
 8003d52:	bf08      	it	eq
 8003d54:	68ec      	ldreq	r4, [r5, #12]
 8003d56:	e7e6      	b.n	8003d26 <__swsetup_r+0x1e>
 8003d58:	0758      	lsls	r0, r3, #29
 8003d5a:	d512      	bpl.n	8003d82 <__swsetup_r+0x7a>
 8003d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d5e:	b141      	cbz	r1, 8003d72 <__swsetup_r+0x6a>
 8003d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d64:	4299      	cmp	r1, r3
 8003d66:	d002      	beq.n	8003d6e <__swsetup_r+0x66>
 8003d68:	4630      	mov	r0, r6
 8003d6a:	f7ff fa77 	bl	800325c <_free_r>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	6363      	str	r3, [r4, #52]	; 0x34
 8003d72:	89a3      	ldrh	r3, [r4, #12]
 8003d74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d78:	81a3      	strh	r3, [r4, #12]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	6063      	str	r3, [r4, #4]
 8003d7e:	6923      	ldr	r3, [r4, #16]
 8003d80:	6023      	str	r3, [r4, #0]
 8003d82:	89a3      	ldrh	r3, [r4, #12]
 8003d84:	f043 0308 	orr.w	r3, r3, #8
 8003d88:	81a3      	strh	r3, [r4, #12]
 8003d8a:	6923      	ldr	r3, [r4, #16]
 8003d8c:	b94b      	cbnz	r3, 8003da2 <__swsetup_r+0x9a>
 8003d8e:	89a3      	ldrh	r3, [r4, #12]
 8003d90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d98:	d003      	beq.n	8003da2 <__swsetup_r+0x9a>
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	f000 fa07 	bl	80041b0 <__smakebuf_r>
 8003da2:	89a0      	ldrh	r0, [r4, #12]
 8003da4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003da8:	f010 0301 	ands.w	r3, r0, #1
 8003dac:	d00a      	beq.n	8003dc4 <__swsetup_r+0xbc>
 8003dae:	2300      	movs	r3, #0
 8003db0:	60a3      	str	r3, [r4, #8]
 8003db2:	6963      	ldr	r3, [r4, #20]
 8003db4:	425b      	negs	r3, r3
 8003db6:	61a3      	str	r3, [r4, #24]
 8003db8:	6923      	ldr	r3, [r4, #16]
 8003dba:	b943      	cbnz	r3, 8003dce <__swsetup_r+0xc6>
 8003dbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003dc0:	d1ba      	bne.n	8003d38 <__swsetup_r+0x30>
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}
 8003dc4:	0781      	lsls	r1, r0, #30
 8003dc6:	bf58      	it	pl
 8003dc8:	6963      	ldrpl	r3, [r4, #20]
 8003dca:	60a3      	str	r3, [r4, #8]
 8003dcc:	e7f4      	b.n	8003db8 <__swsetup_r+0xb0>
 8003dce:	2000      	movs	r0, #0
 8003dd0:	e7f7      	b.n	8003dc2 <__swsetup_r+0xba>
 8003dd2:	bf00      	nop
 8003dd4:	2000000c 	.word	0x2000000c
 8003dd8:	0800463c 	.word	0x0800463c
 8003ddc:	0800465c 	.word	0x0800465c
 8003de0:	0800461c 	.word	0x0800461c

08003de4 <abort>:
 8003de4:	b508      	push	{r3, lr}
 8003de6:	2006      	movs	r0, #6
 8003de8:	f000 faa4 	bl	8004334 <raise>
 8003dec:	2001      	movs	r0, #1
 8003dee:	f7fc fc8f 	bl	8000710 <_exit>
	...

08003df4 <__sflush_r>:
 8003df4:	898a      	ldrh	r2, [r1, #12]
 8003df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dfa:	4605      	mov	r5, r0
 8003dfc:	0710      	lsls	r0, r2, #28
 8003dfe:	460c      	mov	r4, r1
 8003e00:	d458      	bmi.n	8003eb4 <__sflush_r+0xc0>
 8003e02:	684b      	ldr	r3, [r1, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	dc05      	bgt.n	8003e14 <__sflush_r+0x20>
 8003e08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	dc02      	bgt.n	8003e14 <__sflush_r+0x20>
 8003e0e:	2000      	movs	r0, #0
 8003e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e16:	2e00      	cmp	r6, #0
 8003e18:	d0f9      	beq.n	8003e0e <__sflush_r+0x1a>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e20:	682f      	ldr	r7, [r5, #0]
 8003e22:	602b      	str	r3, [r5, #0]
 8003e24:	d032      	beq.n	8003e8c <__sflush_r+0x98>
 8003e26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e28:	89a3      	ldrh	r3, [r4, #12]
 8003e2a:	075a      	lsls	r2, r3, #29
 8003e2c:	d505      	bpl.n	8003e3a <__sflush_r+0x46>
 8003e2e:	6863      	ldr	r3, [r4, #4]
 8003e30:	1ac0      	subs	r0, r0, r3
 8003e32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e34:	b10b      	cbz	r3, 8003e3a <__sflush_r+0x46>
 8003e36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e38:	1ac0      	subs	r0, r0, r3
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e40:	6a21      	ldr	r1, [r4, #32]
 8003e42:	4628      	mov	r0, r5
 8003e44:	47b0      	blx	r6
 8003e46:	1c43      	adds	r3, r0, #1
 8003e48:	89a3      	ldrh	r3, [r4, #12]
 8003e4a:	d106      	bne.n	8003e5a <__sflush_r+0x66>
 8003e4c:	6829      	ldr	r1, [r5, #0]
 8003e4e:	291d      	cmp	r1, #29
 8003e50:	d82c      	bhi.n	8003eac <__sflush_r+0xb8>
 8003e52:	4a2a      	ldr	r2, [pc, #168]	; (8003efc <__sflush_r+0x108>)
 8003e54:	40ca      	lsrs	r2, r1
 8003e56:	07d6      	lsls	r6, r2, #31
 8003e58:	d528      	bpl.n	8003eac <__sflush_r+0xb8>
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	6062      	str	r2, [r4, #4]
 8003e5e:	04d9      	lsls	r1, r3, #19
 8003e60:	6922      	ldr	r2, [r4, #16]
 8003e62:	6022      	str	r2, [r4, #0]
 8003e64:	d504      	bpl.n	8003e70 <__sflush_r+0x7c>
 8003e66:	1c42      	adds	r2, r0, #1
 8003e68:	d101      	bne.n	8003e6e <__sflush_r+0x7a>
 8003e6a:	682b      	ldr	r3, [r5, #0]
 8003e6c:	b903      	cbnz	r3, 8003e70 <__sflush_r+0x7c>
 8003e6e:	6560      	str	r0, [r4, #84]	; 0x54
 8003e70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e72:	602f      	str	r7, [r5, #0]
 8003e74:	2900      	cmp	r1, #0
 8003e76:	d0ca      	beq.n	8003e0e <__sflush_r+0x1a>
 8003e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e7c:	4299      	cmp	r1, r3
 8003e7e:	d002      	beq.n	8003e86 <__sflush_r+0x92>
 8003e80:	4628      	mov	r0, r5
 8003e82:	f7ff f9eb 	bl	800325c <_free_r>
 8003e86:	2000      	movs	r0, #0
 8003e88:	6360      	str	r0, [r4, #52]	; 0x34
 8003e8a:	e7c1      	b.n	8003e10 <__sflush_r+0x1c>
 8003e8c:	6a21      	ldr	r1, [r4, #32]
 8003e8e:	2301      	movs	r3, #1
 8003e90:	4628      	mov	r0, r5
 8003e92:	47b0      	blx	r6
 8003e94:	1c41      	adds	r1, r0, #1
 8003e96:	d1c7      	bne.n	8003e28 <__sflush_r+0x34>
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0c4      	beq.n	8003e28 <__sflush_r+0x34>
 8003e9e:	2b1d      	cmp	r3, #29
 8003ea0:	d001      	beq.n	8003ea6 <__sflush_r+0xb2>
 8003ea2:	2b16      	cmp	r3, #22
 8003ea4:	d101      	bne.n	8003eaa <__sflush_r+0xb6>
 8003ea6:	602f      	str	r7, [r5, #0]
 8003ea8:	e7b1      	b.n	8003e0e <__sflush_r+0x1a>
 8003eaa:	89a3      	ldrh	r3, [r4, #12]
 8003eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eb0:	81a3      	strh	r3, [r4, #12]
 8003eb2:	e7ad      	b.n	8003e10 <__sflush_r+0x1c>
 8003eb4:	690f      	ldr	r7, [r1, #16]
 8003eb6:	2f00      	cmp	r7, #0
 8003eb8:	d0a9      	beq.n	8003e0e <__sflush_r+0x1a>
 8003eba:	0793      	lsls	r3, r2, #30
 8003ebc:	680e      	ldr	r6, [r1, #0]
 8003ebe:	bf08      	it	eq
 8003ec0:	694b      	ldreq	r3, [r1, #20]
 8003ec2:	600f      	str	r7, [r1, #0]
 8003ec4:	bf18      	it	ne
 8003ec6:	2300      	movne	r3, #0
 8003ec8:	eba6 0807 	sub.w	r8, r6, r7
 8003ecc:	608b      	str	r3, [r1, #8]
 8003ece:	f1b8 0f00 	cmp.w	r8, #0
 8003ed2:	dd9c      	ble.n	8003e0e <__sflush_r+0x1a>
 8003ed4:	6a21      	ldr	r1, [r4, #32]
 8003ed6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ed8:	4643      	mov	r3, r8
 8003eda:	463a      	mov	r2, r7
 8003edc:	4628      	mov	r0, r5
 8003ede:	47b0      	blx	r6
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	dc06      	bgt.n	8003ef2 <__sflush_r+0xfe>
 8003ee4:	89a3      	ldrh	r3, [r4, #12]
 8003ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eea:	81a3      	strh	r3, [r4, #12]
 8003eec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef0:	e78e      	b.n	8003e10 <__sflush_r+0x1c>
 8003ef2:	4407      	add	r7, r0
 8003ef4:	eba8 0800 	sub.w	r8, r8, r0
 8003ef8:	e7e9      	b.n	8003ece <__sflush_r+0xda>
 8003efa:	bf00      	nop
 8003efc:	20400001 	.word	0x20400001

08003f00 <_fflush_r>:
 8003f00:	b538      	push	{r3, r4, r5, lr}
 8003f02:	690b      	ldr	r3, [r1, #16]
 8003f04:	4605      	mov	r5, r0
 8003f06:	460c      	mov	r4, r1
 8003f08:	b913      	cbnz	r3, 8003f10 <_fflush_r+0x10>
 8003f0a:	2500      	movs	r5, #0
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	bd38      	pop	{r3, r4, r5, pc}
 8003f10:	b118      	cbz	r0, 8003f1a <_fflush_r+0x1a>
 8003f12:	6983      	ldr	r3, [r0, #24]
 8003f14:	b90b      	cbnz	r3, 8003f1a <_fflush_r+0x1a>
 8003f16:	f000 f887 	bl	8004028 <__sinit>
 8003f1a:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <_fflush_r+0x6c>)
 8003f1c:	429c      	cmp	r4, r3
 8003f1e:	d11b      	bne.n	8003f58 <_fflush_r+0x58>
 8003f20:	686c      	ldr	r4, [r5, #4]
 8003f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0ef      	beq.n	8003f0a <_fflush_r+0xa>
 8003f2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f2c:	07d0      	lsls	r0, r2, #31
 8003f2e:	d404      	bmi.n	8003f3a <_fflush_r+0x3a>
 8003f30:	0599      	lsls	r1, r3, #22
 8003f32:	d402      	bmi.n	8003f3a <_fflush_r+0x3a>
 8003f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f36:	f000 f915 	bl	8004164 <__retarget_lock_acquire_recursive>
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	f7ff ff59 	bl	8003df4 <__sflush_r>
 8003f42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f44:	07da      	lsls	r2, r3, #31
 8003f46:	4605      	mov	r5, r0
 8003f48:	d4e0      	bmi.n	8003f0c <_fflush_r+0xc>
 8003f4a:	89a3      	ldrh	r3, [r4, #12]
 8003f4c:	059b      	lsls	r3, r3, #22
 8003f4e:	d4dd      	bmi.n	8003f0c <_fflush_r+0xc>
 8003f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f52:	f000 f908 	bl	8004166 <__retarget_lock_release_recursive>
 8003f56:	e7d9      	b.n	8003f0c <_fflush_r+0xc>
 8003f58:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <_fflush_r+0x70>)
 8003f5a:	429c      	cmp	r4, r3
 8003f5c:	d101      	bne.n	8003f62 <_fflush_r+0x62>
 8003f5e:	68ac      	ldr	r4, [r5, #8]
 8003f60:	e7df      	b.n	8003f22 <_fflush_r+0x22>
 8003f62:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <_fflush_r+0x74>)
 8003f64:	429c      	cmp	r4, r3
 8003f66:	bf08      	it	eq
 8003f68:	68ec      	ldreq	r4, [r5, #12]
 8003f6a:	e7da      	b.n	8003f22 <_fflush_r+0x22>
 8003f6c:	0800463c 	.word	0x0800463c
 8003f70:	0800465c 	.word	0x0800465c
 8003f74:	0800461c 	.word	0x0800461c

08003f78 <std>:
 8003f78:	2300      	movs	r3, #0
 8003f7a:	b510      	push	{r4, lr}
 8003f7c:	4604      	mov	r4, r0
 8003f7e:	e9c0 3300 	strd	r3, r3, [r0]
 8003f82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f86:	6083      	str	r3, [r0, #8]
 8003f88:	8181      	strh	r1, [r0, #12]
 8003f8a:	6643      	str	r3, [r0, #100]	; 0x64
 8003f8c:	81c2      	strh	r2, [r0, #14]
 8003f8e:	6183      	str	r3, [r0, #24]
 8003f90:	4619      	mov	r1, r3
 8003f92:	2208      	movs	r2, #8
 8003f94:	305c      	adds	r0, #92	; 0x5c
 8003f96:	f7ff f8c1 	bl	800311c <memset>
 8003f9a:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <std+0x38>)
 8003f9c:	6263      	str	r3, [r4, #36]	; 0x24
 8003f9e:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <std+0x3c>)
 8003fa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003fa2:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <std+0x40>)
 8003fa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fa6:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <std+0x44>)
 8003fa8:	6224      	str	r4, [r4, #32]
 8003faa:	6323      	str	r3, [r4, #48]	; 0x30
 8003fac:	bd10      	pop	{r4, pc}
 8003fae:	bf00      	nop
 8003fb0:	0800436d 	.word	0x0800436d
 8003fb4:	0800438f 	.word	0x0800438f
 8003fb8:	080043c7 	.word	0x080043c7
 8003fbc:	080043eb 	.word	0x080043eb

08003fc0 <_cleanup_r>:
 8003fc0:	4901      	ldr	r1, [pc, #4]	; (8003fc8 <_cleanup_r+0x8>)
 8003fc2:	f000 b8af 	b.w	8004124 <_fwalk_reent>
 8003fc6:	bf00      	nop
 8003fc8:	08003f01 	.word	0x08003f01

08003fcc <__sfmoreglue>:
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	1e4a      	subs	r2, r1, #1
 8003fd0:	2568      	movs	r5, #104	; 0x68
 8003fd2:	4355      	muls	r5, r2
 8003fd4:	460e      	mov	r6, r1
 8003fd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003fda:	f7ff f98f 	bl	80032fc <_malloc_r>
 8003fde:	4604      	mov	r4, r0
 8003fe0:	b140      	cbz	r0, 8003ff4 <__sfmoreglue+0x28>
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	e9c0 1600 	strd	r1, r6, [r0]
 8003fe8:	300c      	adds	r0, #12
 8003fea:	60a0      	str	r0, [r4, #8]
 8003fec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ff0:	f7ff f894 	bl	800311c <memset>
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	bd70      	pop	{r4, r5, r6, pc}

08003ff8 <__sfp_lock_acquire>:
 8003ff8:	4801      	ldr	r0, [pc, #4]	; (8004000 <__sfp_lock_acquire+0x8>)
 8003ffa:	f000 b8b3 	b.w	8004164 <__retarget_lock_acquire_recursive>
 8003ffe:	bf00      	nop
 8004000:	20000130 	.word	0x20000130

08004004 <__sfp_lock_release>:
 8004004:	4801      	ldr	r0, [pc, #4]	; (800400c <__sfp_lock_release+0x8>)
 8004006:	f000 b8ae 	b.w	8004166 <__retarget_lock_release_recursive>
 800400a:	bf00      	nop
 800400c:	20000130 	.word	0x20000130

08004010 <__sinit_lock_acquire>:
 8004010:	4801      	ldr	r0, [pc, #4]	; (8004018 <__sinit_lock_acquire+0x8>)
 8004012:	f000 b8a7 	b.w	8004164 <__retarget_lock_acquire_recursive>
 8004016:	bf00      	nop
 8004018:	2000012b 	.word	0x2000012b

0800401c <__sinit_lock_release>:
 800401c:	4801      	ldr	r0, [pc, #4]	; (8004024 <__sinit_lock_release+0x8>)
 800401e:	f000 b8a2 	b.w	8004166 <__retarget_lock_release_recursive>
 8004022:	bf00      	nop
 8004024:	2000012b 	.word	0x2000012b

08004028 <__sinit>:
 8004028:	b510      	push	{r4, lr}
 800402a:	4604      	mov	r4, r0
 800402c:	f7ff fff0 	bl	8004010 <__sinit_lock_acquire>
 8004030:	69a3      	ldr	r3, [r4, #24]
 8004032:	b11b      	cbz	r3, 800403c <__sinit+0x14>
 8004034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004038:	f7ff bff0 	b.w	800401c <__sinit_lock_release>
 800403c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004040:	6523      	str	r3, [r4, #80]	; 0x50
 8004042:	4b13      	ldr	r3, [pc, #76]	; (8004090 <__sinit+0x68>)
 8004044:	4a13      	ldr	r2, [pc, #76]	; (8004094 <__sinit+0x6c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	62a2      	str	r2, [r4, #40]	; 0x28
 800404a:	42a3      	cmp	r3, r4
 800404c:	bf04      	itt	eq
 800404e:	2301      	moveq	r3, #1
 8004050:	61a3      	streq	r3, [r4, #24]
 8004052:	4620      	mov	r0, r4
 8004054:	f000 f820 	bl	8004098 <__sfp>
 8004058:	6060      	str	r0, [r4, #4]
 800405a:	4620      	mov	r0, r4
 800405c:	f000 f81c 	bl	8004098 <__sfp>
 8004060:	60a0      	str	r0, [r4, #8]
 8004062:	4620      	mov	r0, r4
 8004064:	f000 f818 	bl	8004098 <__sfp>
 8004068:	2200      	movs	r2, #0
 800406a:	60e0      	str	r0, [r4, #12]
 800406c:	2104      	movs	r1, #4
 800406e:	6860      	ldr	r0, [r4, #4]
 8004070:	f7ff ff82 	bl	8003f78 <std>
 8004074:	68a0      	ldr	r0, [r4, #8]
 8004076:	2201      	movs	r2, #1
 8004078:	2109      	movs	r1, #9
 800407a:	f7ff ff7d 	bl	8003f78 <std>
 800407e:	68e0      	ldr	r0, [r4, #12]
 8004080:	2202      	movs	r2, #2
 8004082:	2112      	movs	r1, #18
 8004084:	f7ff ff78 	bl	8003f78 <std>
 8004088:	2301      	movs	r3, #1
 800408a:	61a3      	str	r3, [r4, #24]
 800408c:	e7d2      	b.n	8004034 <__sinit+0xc>
 800408e:	bf00      	nop
 8004090:	08004530 	.word	0x08004530
 8004094:	08003fc1 	.word	0x08003fc1

08004098 <__sfp>:
 8004098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409a:	4607      	mov	r7, r0
 800409c:	f7ff ffac 	bl	8003ff8 <__sfp_lock_acquire>
 80040a0:	4b1e      	ldr	r3, [pc, #120]	; (800411c <__sfp+0x84>)
 80040a2:	681e      	ldr	r6, [r3, #0]
 80040a4:	69b3      	ldr	r3, [r6, #24]
 80040a6:	b913      	cbnz	r3, 80040ae <__sfp+0x16>
 80040a8:	4630      	mov	r0, r6
 80040aa:	f7ff ffbd 	bl	8004028 <__sinit>
 80040ae:	3648      	adds	r6, #72	; 0x48
 80040b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	d503      	bpl.n	80040c0 <__sfp+0x28>
 80040b8:	6833      	ldr	r3, [r6, #0]
 80040ba:	b30b      	cbz	r3, 8004100 <__sfp+0x68>
 80040bc:	6836      	ldr	r6, [r6, #0]
 80040be:	e7f7      	b.n	80040b0 <__sfp+0x18>
 80040c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80040c4:	b9d5      	cbnz	r5, 80040fc <__sfp+0x64>
 80040c6:	4b16      	ldr	r3, [pc, #88]	; (8004120 <__sfp+0x88>)
 80040c8:	60e3      	str	r3, [r4, #12]
 80040ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80040ce:	6665      	str	r5, [r4, #100]	; 0x64
 80040d0:	f000 f847 	bl	8004162 <__retarget_lock_init_recursive>
 80040d4:	f7ff ff96 	bl	8004004 <__sfp_lock_release>
 80040d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80040dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80040e0:	6025      	str	r5, [r4, #0]
 80040e2:	61a5      	str	r5, [r4, #24]
 80040e4:	2208      	movs	r2, #8
 80040e6:	4629      	mov	r1, r5
 80040e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80040ec:	f7ff f816 	bl	800311c <memset>
 80040f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80040f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80040f8:	4620      	mov	r0, r4
 80040fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040fc:	3468      	adds	r4, #104	; 0x68
 80040fe:	e7d9      	b.n	80040b4 <__sfp+0x1c>
 8004100:	2104      	movs	r1, #4
 8004102:	4638      	mov	r0, r7
 8004104:	f7ff ff62 	bl	8003fcc <__sfmoreglue>
 8004108:	4604      	mov	r4, r0
 800410a:	6030      	str	r0, [r6, #0]
 800410c:	2800      	cmp	r0, #0
 800410e:	d1d5      	bne.n	80040bc <__sfp+0x24>
 8004110:	f7ff ff78 	bl	8004004 <__sfp_lock_release>
 8004114:	230c      	movs	r3, #12
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	e7ee      	b.n	80040f8 <__sfp+0x60>
 800411a:	bf00      	nop
 800411c:	08004530 	.word	0x08004530
 8004120:	ffff0001 	.word	0xffff0001

08004124 <_fwalk_reent>:
 8004124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004128:	4606      	mov	r6, r0
 800412a:	4688      	mov	r8, r1
 800412c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004130:	2700      	movs	r7, #0
 8004132:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004136:	f1b9 0901 	subs.w	r9, r9, #1
 800413a:	d505      	bpl.n	8004148 <_fwalk_reent+0x24>
 800413c:	6824      	ldr	r4, [r4, #0]
 800413e:	2c00      	cmp	r4, #0
 8004140:	d1f7      	bne.n	8004132 <_fwalk_reent+0xe>
 8004142:	4638      	mov	r0, r7
 8004144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004148:	89ab      	ldrh	r3, [r5, #12]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d907      	bls.n	800415e <_fwalk_reent+0x3a>
 800414e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004152:	3301      	adds	r3, #1
 8004154:	d003      	beq.n	800415e <_fwalk_reent+0x3a>
 8004156:	4629      	mov	r1, r5
 8004158:	4630      	mov	r0, r6
 800415a:	47c0      	blx	r8
 800415c:	4307      	orrs	r7, r0
 800415e:	3568      	adds	r5, #104	; 0x68
 8004160:	e7e9      	b.n	8004136 <_fwalk_reent+0x12>

08004162 <__retarget_lock_init_recursive>:
 8004162:	4770      	bx	lr

08004164 <__retarget_lock_acquire_recursive>:
 8004164:	4770      	bx	lr

08004166 <__retarget_lock_release_recursive>:
 8004166:	4770      	bx	lr

08004168 <__swhatbuf_r>:
 8004168:	b570      	push	{r4, r5, r6, lr}
 800416a:	460e      	mov	r6, r1
 800416c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004170:	2900      	cmp	r1, #0
 8004172:	b096      	sub	sp, #88	; 0x58
 8004174:	4614      	mov	r4, r2
 8004176:	461d      	mov	r5, r3
 8004178:	da07      	bge.n	800418a <__swhatbuf_r+0x22>
 800417a:	2300      	movs	r3, #0
 800417c:	602b      	str	r3, [r5, #0]
 800417e:	89b3      	ldrh	r3, [r6, #12]
 8004180:	061a      	lsls	r2, r3, #24
 8004182:	d410      	bmi.n	80041a6 <__swhatbuf_r+0x3e>
 8004184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004188:	e00e      	b.n	80041a8 <__swhatbuf_r+0x40>
 800418a:	466a      	mov	r2, sp
 800418c:	f000 f954 	bl	8004438 <_fstat_r>
 8004190:	2800      	cmp	r0, #0
 8004192:	dbf2      	blt.n	800417a <__swhatbuf_r+0x12>
 8004194:	9a01      	ldr	r2, [sp, #4]
 8004196:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800419a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800419e:	425a      	negs	r2, r3
 80041a0:	415a      	adcs	r2, r3
 80041a2:	602a      	str	r2, [r5, #0]
 80041a4:	e7ee      	b.n	8004184 <__swhatbuf_r+0x1c>
 80041a6:	2340      	movs	r3, #64	; 0x40
 80041a8:	2000      	movs	r0, #0
 80041aa:	6023      	str	r3, [r4, #0]
 80041ac:	b016      	add	sp, #88	; 0x58
 80041ae:	bd70      	pop	{r4, r5, r6, pc}

080041b0 <__smakebuf_r>:
 80041b0:	898b      	ldrh	r3, [r1, #12]
 80041b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80041b4:	079d      	lsls	r5, r3, #30
 80041b6:	4606      	mov	r6, r0
 80041b8:	460c      	mov	r4, r1
 80041ba:	d507      	bpl.n	80041cc <__smakebuf_r+0x1c>
 80041bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	6123      	str	r3, [r4, #16]
 80041c4:	2301      	movs	r3, #1
 80041c6:	6163      	str	r3, [r4, #20]
 80041c8:	b002      	add	sp, #8
 80041ca:	bd70      	pop	{r4, r5, r6, pc}
 80041cc:	ab01      	add	r3, sp, #4
 80041ce:	466a      	mov	r2, sp
 80041d0:	f7ff ffca 	bl	8004168 <__swhatbuf_r>
 80041d4:	9900      	ldr	r1, [sp, #0]
 80041d6:	4605      	mov	r5, r0
 80041d8:	4630      	mov	r0, r6
 80041da:	f7ff f88f 	bl	80032fc <_malloc_r>
 80041de:	b948      	cbnz	r0, 80041f4 <__smakebuf_r+0x44>
 80041e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041e4:	059a      	lsls	r2, r3, #22
 80041e6:	d4ef      	bmi.n	80041c8 <__smakebuf_r+0x18>
 80041e8:	f023 0303 	bic.w	r3, r3, #3
 80041ec:	f043 0302 	orr.w	r3, r3, #2
 80041f0:	81a3      	strh	r3, [r4, #12]
 80041f2:	e7e3      	b.n	80041bc <__smakebuf_r+0xc>
 80041f4:	4b0d      	ldr	r3, [pc, #52]	; (800422c <__smakebuf_r+0x7c>)
 80041f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80041f8:	89a3      	ldrh	r3, [r4, #12]
 80041fa:	6020      	str	r0, [r4, #0]
 80041fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004200:	81a3      	strh	r3, [r4, #12]
 8004202:	9b00      	ldr	r3, [sp, #0]
 8004204:	6163      	str	r3, [r4, #20]
 8004206:	9b01      	ldr	r3, [sp, #4]
 8004208:	6120      	str	r0, [r4, #16]
 800420a:	b15b      	cbz	r3, 8004224 <__smakebuf_r+0x74>
 800420c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004210:	4630      	mov	r0, r6
 8004212:	f000 f923 	bl	800445c <_isatty_r>
 8004216:	b128      	cbz	r0, 8004224 <__smakebuf_r+0x74>
 8004218:	89a3      	ldrh	r3, [r4, #12]
 800421a:	f023 0303 	bic.w	r3, r3, #3
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	81a3      	strh	r3, [r4, #12]
 8004224:	89a0      	ldrh	r0, [r4, #12]
 8004226:	4305      	orrs	r5, r0
 8004228:	81a5      	strh	r5, [r4, #12]
 800422a:	e7cd      	b.n	80041c8 <__smakebuf_r+0x18>
 800422c:	08003fc1 	.word	0x08003fc1

08004230 <memcpy>:
 8004230:	440a      	add	r2, r1
 8004232:	4291      	cmp	r1, r2
 8004234:	f100 33ff 	add.w	r3, r0, #4294967295
 8004238:	d100      	bne.n	800423c <memcpy+0xc>
 800423a:	4770      	bx	lr
 800423c:	b510      	push	{r4, lr}
 800423e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004242:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004246:	4291      	cmp	r1, r2
 8004248:	d1f9      	bne.n	800423e <memcpy+0xe>
 800424a:	bd10      	pop	{r4, pc}

0800424c <memmove>:
 800424c:	4288      	cmp	r0, r1
 800424e:	b510      	push	{r4, lr}
 8004250:	eb01 0402 	add.w	r4, r1, r2
 8004254:	d902      	bls.n	800425c <memmove+0x10>
 8004256:	4284      	cmp	r4, r0
 8004258:	4623      	mov	r3, r4
 800425a:	d807      	bhi.n	800426c <memmove+0x20>
 800425c:	1e43      	subs	r3, r0, #1
 800425e:	42a1      	cmp	r1, r4
 8004260:	d008      	beq.n	8004274 <memmove+0x28>
 8004262:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004266:	f803 2f01 	strb.w	r2, [r3, #1]!
 800426a:	e7f8      	b.n	800425e <memmove+0x12>
 800426c:	4402      	add	r2, r0
 800426e:	4601      	mov	r1, r0
 8004270:	428a      	cmp	r2, r1
 8004272:	d100      	bne.n	8004276 <memmove+0x2a>
 8004274:	bd10      	pop	{r4, pc}
 8004276:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800427a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800427e:	e7f7      	b.n	8004270 <memmove+0x24>

08004280 <__malloc_lock>:
 8004280:	4801      	ldr	r0, [pc, #4]	; (8004288 <__malloc_lock+0x8>)
 8004282:	f7ff bf6f 	b.w	8004164 <__retarget_lock_acquire_recursive>
 8004286:	bf00      	nop
 8004288:	2000012c 	.word	0x2000012c

0800428c <__malloc_unlock>:
 800428c:	4801      	ldr	r0, [pc, #4]	; (8004294 <__malloc_unlock+0x8>)
 800428e:	f7ff bf6a 	b.w	8004166 <__retarget_lock_release_recursive>
 8004292:	bf00      	nop
 8004294:	2000012c 	.word	0x2000012c

08004298 <_realloc_r>:
 8004298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429a:	4607      	mov	r7, r0
 800429c:	4614      	mov	r4, r2
 800429e:	460e      	mov	r6, r1
 80042a0:	b921      	cbnz	r1, 80042ac <_realloc_r+0x14>
 80042a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80042a6:	4611      	mov	r1, r2
 80042a8:	f7ff b828 	b.w	80032fc <_malloc_r>
 80042ac:	b922      	cbnz	r2, 80042b8 <_realloc_r+0x20>
 80042ae:	f7fe ffd5 	bl	800325c <_free_r>
 80042b2:	4625      	mov	r5, r4
 80042b4:	4628      	mov	r0, r5
 80042b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042b8:	f000 f8f2 	bl	80044a0 <_malloc_usable_size_r>
 80042bc:	42a0      	cmp	r0, r4
 80042be:	d20f      	bcs.n	80042e0 <_realloc_r+0x48>
 80042c0:	4621      	mov	r1, r4
 80042c2:	4638      	mov	r0, r7
 80042c4:	f7ff f81a 	bl	80032fc <_malloc_r>
 80042c8:	4605      	mov	r5, r0
 80042ca:	2800      	cmp	r0, #0
 80042cc:	d0f2      	beq.n	80042b4 <_realloc_r+0x1c>
 80042ce:	4631      	mov	r1, r6
 80042d0:	4622      	mov	r2, r4
 80042d2:	f7ff ffad 	bl	8004230 <memcpy>
 80042d6:	4631      	mov	r1, r6
 80042d8:	4638      	mov	r0, r7
 80042da:	f7fe ffbf 	bl	800325c <_free_r>
 80042de:	e7e9      	b.n	80042b4 <_realloc_r+0x1c>
 80042e0:	4635      	mov	r5, r6
 80042e2:	e7e7      	b.n	80042b4 <_realloc_r+0x1c>

080042e4 <_raise_r>:
 80042e4:	291f      	cmp	r1, #31
 80042e6:	b538      	push	{r3, r4, r5, lr}
 80042e8:	4604      	mov	r4, r0
 80042ea:	460d      	mov	r5, r1
 80042ec:	d904      	bls.n	80042f8 <_raise_r+0x14>
 80042ee:	2316      	movs	r3, #22
 80042f0:	6003      	str	r3, [r0, #0]
 80042f2:	f04f 30ff 	mov.w	r0, #4294967295
 80042f6:	bd38      	pop	{r3, r4, r5, pc}
 80042f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80042fa:	b112      	cbz	r2, 8004302 <_raise_r+0x1e>
 80042fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004300:	b94b      	cbnz	r3, 8004316 <_raise_r+0x32>
 8004302:	4620      	mov	r0, r4
 8004304:	f000 f830 	bl	8004368 <_getpid_r>
 8004308:	462a      	mov	r2, r5
 800430a:	4601      	mov	r1, r0
 800430c:	4620      	mov	r0, r4
 800430e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004312:	f000 b817 	b.w	8004344 <_kill_r>
 8004316:	2b01      	cmp	r3, #1
 8004318:	d00a      	beq.n	8004330 <_raise_r+0x4c>
 800431a:	1c59      	adds	r1, r3, #1
 800431c:	d103      	bne.n	8004326 <_raise_r+0x42>
 800431e:	2316      	movs	r3, #22
 8004320:	6003      	str	r3, [r0, #0]
 8004322:	2001      	movs	r0, #1
 8004324:	e7e7      	b.n	80042f6 <_raise_r+0x12>
 8004326:	2400      	movs	r4, #0
 8004328:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800432c:	4628      	mov	r0, r5
 800432e:	4798      	blx	r3
 8004330:	2000      	movs	r0, #0
 8004332:	e7e0      	b.n	80042f6 <_raise_r+0x12>

08004334 <raise>:
 8004334:	4b02      	ldr	r3, [pc, #8]	; (8004340 <raise+0xc>)
 8004336:	4601      	mov	r1, r0
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	f7ff bfd3 	b.w	80042e4 <_raise_r>
 800433e:	bf00      	nop
 8004340:	2000000c 	.word	0x2000000c

08004344 <_kill_r>:
 8004344:	b538      	push	{r3, r4, r5, lr}
 8004346:	4d07      	ldr	r5, [pc, #28]	; (8004364 <_kill_r+0x20>)
 8004348:	2300      	movs	r3, #0
 800434a:	4604      	mov	r4, r0
 800434c:	4608      	mov	r0, r1
 800434e:	4611      	mov	r1, r2
 8004350:	602b      	str	r3, [r5, #0]
 8004352:	f7fc f9cd 	bl	80006f0 <_kill>
 8004356:	1c43      	adds	r3, r0, #1
 8004358:	d102      	bne.n	8004360 <_kill_r+0x1c>
 800435a:	682b      	ldr	r3, [r5, #0]
 800435c:	b103      	cbz	r3, 8004360 <_kill_r+0x1c>
 800435e:	6023      	str	r3, [r4, #0]
 8004360:	bd38      	pop	{r3, r4, r5, pc}
 8004362:	bf00      	nop
 8004364:	20000134 	.word	0x20000134

08004368 <_getpid_r>:
 8004368:	f7fc b9ba 	b.w	80006e0 <_getpid>

0800436c <__sread>:
 800436c:	b510      	push	{r4, lr}
 800436e:	460c      	mov	r4, r1
 8004370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004374:	f000 f89c 	bl	80044b0 <_read_r>
 8004378:	2800      	cmp	r0, #0
 800437a:	bfab      	itete	ge
 800437c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800437e:	89a3      	ldrhlt	r3, [r4, #12]
 8004380:	181b      	addge	r3, r3, r0
 8004382:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004386:	bfac      	ite	ge
 8004388:	6563      	strge	r3, [r4, #84]	; 0x54
 800438a:	81a3      	strhlt	r3, [r4, #12]
 800438c:	bd10      	pop	{r4, pc}

0800438e <__swrite>:
 800438e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004392:	461f      	mov	r7, r3
 8004394:	898b      	ldrh	r3, [r1, #12]
 8004396:	05db      	lsls	r3, r3, #23
 8004398:	4605      	mov	r5, r0
 800439a:	460c      	mov	r4, r1
 800439c:	4616      	mov	r6, r2
 800439e:	d505      	bpl.n	80043ac <__swrite+0x1e>
 80043a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043a4:	2302      	movs	r3, #2
 80043a6:	2200      	movs	r2, #0
 80043a8:	f000 f868 	bl	800447c <_lseek_r>
 80043ac:	89a3      	ldrh	r3, [r4, #12]
 80043ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043b6:	81a3      	strh	r3, [r4, #12]
 80043b8:	4632      	mov	r2, r6
 80043ba:	463b      	mov	r3, r7
 80043bc:	4628      	mov	r0, r5
 80043be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043c2:	f000 b817 	b.w	80043f4 <_write_r>

080043c6 <__sseek>:
 80043c6:	b510      	push	{r4, lr}
 80043c8:	460c      	mov	r4, r1
 80043ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ce:	f000 f855 	bl	800447c <_lseek_r>
 80043d2:	1c43      	adds	r3, r0, #1
 80043d4:	89a3      	ldrh	r3, [r4, #12]
 80043d6:	bf15      	itete	ne
 80043d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80043da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043e2:	81a3      	strheq	r3, [r4, #12]
 80043e4:	bf18      	it	ne
 80043e6:	81a3      	strhne	r3, [r4, #12]
 80043e8:	bd10      	pop	{r4, pc}

080043ea <__sclose>:
 80043ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ee:	f000 b813 	b.w	8004418 <_close_r>
	...

080043f4 <_write_r>:
 80043f4:	b538      	push	{r3, r4, r5, lr}
 80043f6:	4d07      	ldr	r5, [pc, #28]	; (8004414 <_write_r+0x20>)
 80043f8:	4604      	mov	r4, r0
 80043fa:	4608      	mov	r0, r1
 80043fc:	4611      	mov	r1, r2
 80043fe:	2200      	movs	r2, #0
 8004400:	602a      	str	r2, [r5, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	f7fc f9ab 	bl	800075e <_write>
 8004408:	1c43      	adds	r3, r0, #1
 800440a:	d102      	bne.n	8004412 <_write_r+0x1e>
 800440c:	682b      	ldr	r3, [r5, #0]
 800440e:	b103      	cbz	r3, 8004412 <_write_r+0x1e>
 8004410:	6023      	str	r3, [r4, #0]
 8004412:	bd38      	pop	{r3, r4, r5, pc}
 8004414:	20000134 	.word	0x20000134

08004418 <_close_r>:
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	4d06      	ldr	r5, [pc, #24]	; (8004434 <_close_r+0x1c>)
 800441c:	2300      	movs	r3, #0
 800441e:	4604      	mov	r4, r0
 8004420:	4608      	mov	r0, r1
 8004422:	602b      	str	r3, [r5, #0]
 8004424:	f7fc f9b7 	bl	8000796 <_close>
 8004428:	1c43      	adds	r3, r0, #1
 800442a:	d102      	bne.n	8004432 <_close_r+0x1a>
 800442c:	682b      	ldr	r3, [r5, #0]
 800442e:	b103      	cbz	r3, 8004432 <_close_r+0x1a>
 8004430:	6023      	str	r3, [r4, #0]
 8004432:	bd38      	pop	{r3, r4, r5, pc}
 8004434:	20000134 	.word	0x20000134

08004438 <_fstat_r>:
 8004438:	b538      	push	{r3, r4, r5, lr}
 800443a:	4d07      	ldr	r5, [pc, #28]	; (8004458 <_fstat_r+0x20>)
 800443c:	2300      	movs	r3, #0
 800443e:	4604      	mov	r4, r0
 8004440:	4608      	mov	r0, r1
 8004442:	4611      	mov	r1, r2
 8004444:	602b      	str	r3, [r5, #0]
 8004446:	f7fc f9b2 	bl	80007ae <_fstat>
 800444a:	1c43      	adds	r3, r0, #1
 800444c:	d102      	bne.n	8004454 <_fstat_r+0x1c>
 800444e:	682b      	ldr	r3, [r5, #0]
 8004450:	b103      	cbz	r3, 8004454 <_fstat_r+0x1c>
 8004452:	6023      	str	r3, [r4, #0]
 8004454:	bd38      	pop	{r3, r4, r5, pc}
 8004456:	bf00      	nop
 8004458:	20000134 	.word	0x20000134

0800445c <_isatty_r>:
 800445c:	b538      	push	{r3, r4, r5, lr}
 800445e:	4d06      	ldr	r5, [pc, #24]	; (8004478 <_isatty_r+0x1c>)
 8004460:	2300      	movs	r3, #0
 8004462:	4604      	mov	r4, r0
 8004464:	4608      	mov	r0, r1
 8004466:	602b      	str	r3, [r5, #0]
 8004468:	f7fc f9b1 	bl	80007ce <_isatty>
 800446c:	1c43      	adds	r3, r0, #1
 800446e:	d102      	bne.n	8004476 <_isatty_r+0x1a>
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	b103      	cbz	r3, 8004476 <_isatty_r+0x1a>
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	bd38      	pop	{r3, r4, r5, pc}
 8004478:	20000134 	.word	0x20000134

0800447c <_lseek_r>:
 800447c:	b538      	push	{r3, r4, r5, lr}
 800447e:	4d07      	ldr	r5, [pc, #28]	; (800449c <_lseek_r+0x20>)
 8004480:	4604      	mov	r4, r0
 8004482:	4608      	mov	r0, r1
 8004484:	4611      	mov	r1, r2
 8004486:	2200      	movs	r2, #0
 8004488:	602a      	str	r2, [r5, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	f7fc f9aa 	bl	80007e4 <_lseek>
 8004490:	1c43      	adds	r3, r0, #1
 8004492:	d102      	bne.n	800449a <_lseek_r+0x1e>
 8004494:	682b      	ldr	r3, [r5, #0]
 8004496:	b103      	cbz	r3, 800449a <_lseek_r+0x1e>
 8004498:	6023      	str	r3, [r4, #0]
 800449a:	bd38      	pop	{r3, r4, r5, pc}
 800449c:	20000134 	.word	0x20000134

080044a0 <_malloc_usable_size_r>:
 80044a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044a4:	1f18      	subs	r0, r3, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	bfbc      	itt	lt
 80044aa:	580b      	ldrlt	r3, [r1, r0]
 80044ac:	18c0      	addlt	r0, r0, r3
 80044ae:	4770      	bx	lr

080044b0 <_read_r>:
 80044b0:	b538      	push	{r3, r4, r5, lr}
 80044b2:	4d07      	ldr	r5, [pc, #28]	; (80044d0 <_read_r+0x20>)
 80044b4:	4604      	mov	r4, r0
 80044b6:	4608      	mov	r0, r1
 80044b8:	4611      	mov	r1, r2
 80044ba:	2200      	movs	r2, #0
 80044bc:	602a      	str	r2, [r5, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	f7fc f930 	bl	8000724 <_read>
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	d102      	bne.n	80044ce <_read_r+0x1e>
 80044c8:	682b      	ldr	r3, [r5, #0]
 80044ca:	b103      	cbz	r3, 80044ce <_read_r+0x1e>
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	bd38      	pop	{r3, r4, r5, pc}
 80044d0:	20000134 	.word	0x20000134

080044d4 <_init>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	bf00      	nop
 80044d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044da:	bc08      	pop	{r3}
 80044dc:	469e      	mov	lr, r3
 80044de:	4770      	bx	lr

080044e0 <_fini>:
 80044e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e2:	bf00      	nop
 80044e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e6:	bc08      	pop	{r3}
 80044e8:	469e      	mov	lr, r3
 80044ea:	4770      	bx	lr
